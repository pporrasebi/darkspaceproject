g3 <- ggplot(data=tm_vs_imex, aes(x=db_pair,y=Nof.Docs))
g3 <- g3 + geom_violin(aes(fill=db_pair))
g3 <- g3 + scale_fill_manual(values=c("#E69F00", "#56B4E9"),
labels=c("Found in IMEx", "text-mined only"))
g3 <- g3 + scale_y_log10(breaks=c(10,100,1000,10000),
labels=function(n){format(n, scientific = FALSE)})
g3 <- g3 + labs(title ="Number of occurrences in EPMC in the IMEx and text-mined groups", y = "Number of occurrences (log scale)", x="group")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2]), colour="#56B4E9", linetype="dashed")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2]), colour="#E69F00", linetype="dashed")
g3 <- g3 + annotate("text", x=1.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])+0.5, label = "EPMC-only\nmedian", colour="#56B4E9")
g3 <- g3 + annotate("text", x=0.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])+0.7, label = "Found in IMEx\nmedian", colour="#E69F00")
g3 <- g3 + theme(legend.position="none")
g3
g3 <- ggplot(data=tm_vs_imex, aes(x=db_pair,y=Nof.Docs))
g3 <- g3 + geom_violin(aes(fill=-db_pair))
g3 <- g3 + scale_fill_manual(values=c("#E69F00", "#56B4E9"),
labels=c("Found in IMEx", "text-mined only"))
g3 <- g3 + scale_y_log10(breaks=c(10,100,1000,10000),
labels=function(n){format(n, scientific = FALSE)})
g3 <- g3 + labs(title ="Number of occurrences in EPMC in the IMEx and text-mined groups", y = "Number of occurrences (log scale)", x="group")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2]), colour="#56B4E9", linetype="dashed")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2]), colour="#E69F00", linetype="dashed")
g3 <- g3 + annotate("text", x=1.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])+0.5, label = "EPMC-only\nmedian", colour="#56B4E9")
g3 <- g3 + annotate("text", x=0.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])+0.7, label = "Found in IMEx\nmedian", colour="#E69F00")
g3 <- g3 + theme(legend.position="none")
g3
g3 <- g3 + geom_violin(aes(fill=desc(db_pair)))
g3 <- ggplot(data=tm_vs_imex, aes(x=db_pair,y=Nof.Docs))
g3 <- g3 + geom_violin(aes(fill=desc(db_pair)))
g3 <- g3 + scale_fill_manual(values=c("#E69F00", "#56B4E9"),
labels=c("Found in IMEx", "text-mined only"))
g3 <- g3 + scale_y_log10(breaks=c(10,100,1000,10000),
labels=function(n){format(n, scientific = FALSE)})
g3 <- g3 + labs(title ="Number of occurrences in EPMC in the IMEx and text-mined groups", y = "Number of occurrences (log scale)", x="group")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2]), colour="#56B4E9", linetype="dashed")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2]), colour="#E69F00", linetype="dashed")
g3 <- g3 + annotate("text", x=1.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])+0.5, label = "EPMC-only\nmedian", colour="#56B4E9")
g3 <- g3 + annotate("text", x=0.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])+0.7, label = "Found in IMEx\nmedian", colour="#E69F00")
g3 <- g3 + theme(legend.position="none")
g3
g3 <- ggplot(data=tm_vs_imex, aes(x=db_pair,y=Nof.Docs))
g3 <- g3 + geom_violin(aes(fill=db_pair))
g3 <- g3 + scale_fill_manual(values=c("#56B4E9","#E69F00"),
labels=c("Found in IMEx", "text-mined only"))
g3 <- g3 + scale_y_log10(breaks=c(10,100,1000,10000),
labels=function(n){format(n, scientific = FALSE)})
g3 <- g3 + labs(title ="Number of occurrences in EPMC in the IMEx and text-mined groups", y = "Number of occurrences (log scale)", x="group")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2]), colour="#56B4E9", linetype="dashed")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2]), colour="#E69F00", linetype="dashed")
g3 <- g3 + annotate("text", x=1.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])+0.5, label = "EPMC-only\nmedian", colour="#56B4E9")
g3 <- g3 + annotate("text", x=0.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])+0.7, label = "Found in IMEx\nmedian", colour="#E69F00")
g3 <- g3 + theme(legend.position="none")
g3
g3 <- ggplot(data=tm_vs_imex, aes(x=db_pair,y=Nof.Docs))
g3 <- g3 + geom_violin(aes(fill=db_pair))
g3 <- g3 + scale_fill_manual(values=c("#56B4E9","#E69F00"),
labels=c("Found in IMEx", "text-mined only"))
g3 <- g3 + scale_y_log10(breaks=c(10,100,1000,10000),
labels=function(n){format(n, scientific = FALSE)})
g3 <- g3 + labs(title ="Number of occurrences in EPMC in the IMEx and text-mined groups", y = "Number of occurrences (log scale)", x="group")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2]), colour="#56B4E9", linetype="dashed")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2]), colour="#E69F00", linetype="dashed")
g3 <- g3 + annotate("text", x=0.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])+0.5, label = "EPMC-only\nmedian", colour="#56B4E9")
g3 <- g3 + annotate("text", x=1.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])+0.7, label = "Found in IMEx\nmedian", colour="#E69F00")
g3 <- g3 + theme(legend.position="none")
g3
bartlett.test(tm_vs_imex[,2], tm_vs_imex[,8])
nocs_tm <- data.matrix(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])
nocs_both <- data.matrix(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])
mood.test(nocs_both, nocs_tm, alternative="two.sided")
View(nocs_both)
median(nocs_both)
median(nocs_tm)
mood.test(nocs_both, nocs_tm, alternative="greater")
median.test <- function(x, y){
z <- c(x, y)
g <- rep(1:2, c(length(x), length(y)))
m <- median(z)
fisher.test(z < m, g)$p.value
}
median.test(nocs_both, nocs_tm)
nocs_tm <- (tm_vs_imex[tm_vs_imex$db_pair == "tm",2])
nocs_both <- (tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])
median.test <- function(x, y){
z <- c(x, y)
g <- rep(1:2, c(length(x), length(y)))
m <- median(z)
fisher.test(z < m, g)$p.value
}
median.test(nocs_both, nocs_tm)
nocs_tm <- data.matrix(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])
nocs_both <- data.matrix(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])
mood.medtest(nocs_both, nocs_tm, alternative="greater")
install.packages("RVAideMemoire")
library("RVAideMemoire")
median.test(nocs_both, nocs_tm)
mood.medtest(nocs_both ~ nocs_tm)
?mood.test.formula
nocs_both <- (tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])
nocs_tm <- (tm_vs_imex[tm_vs_imex$db_pair == "tm",2])
mood.test(nocs_both,nocs_tm,alternative="two.sided")
mood.test(nocs_both,nocs_tm)
mood.medtest(nocs_both ~ nocs_tm)
group1 <- rnorm(100, mean = 75, sd = 10)
median.test <- function(x, y){
z <- c(x, y)
g <- rep(1:2, c(length(x), length(y)))
m <- median(z)
fisher.test(z < m, g)$p.value
}
median.test(nocs_both,nocs_tm)
set.seed(1)
group1 <- rnorm(100, mean = 75, sd = 10)
group2 <- rnorm(100, mean = 85, sd = 10)
group3 <- rnorm(100, mean = 95, sd = 10)
median.test(group1, group2)
?rep
install.packages("fBasic")
install.packages("fBasics")
library(fBasics)
moodTest(nocs_both,nocs_tm)
View(tm_vs_imex)
View(tm_vs_imex)
nocs <- tm_vs_imex[,c(2,7)]
View(nocs)
med <- median(nocs$Nof.Docs)
z <- c(nocs_both, nocs_tm)
g <- rep(1:2, c(length(nocs_both), length(nocs_tm)))
head(g)
tail(g)
group <- rep(1:2, c(length(nocs_both), length(nocs_tm)))
rm(g)
m <- median(z)
fisher.test(z < m, g)$p.value
fisher.test(z < m, group)$p.value
fisher.test(as.numeric(z < m), as.numeric(group))$p.value
z < m
head(as.numeric(z<m))
z <- nocs[,1]
group <- as.numeric(nocs[nocs$db_pair=="tm",2])
head(group,50)
group <- as.numeric(nocs[nocs$db_pair=="tm",])
group <- as.numeric(nocs[nocs$db_pair=="tm",nocs$Nof.Docs])
group <- as.numeric(nocs[,2])
head(group,50)
nocs[,2]
as.numeric(nocs[,2])
group <- as.numeric(nocs[,2])
m <- median(z)
fisher.test(as.numeric(z < m), as.numeric(group))$p.value
nocs <- arrange(nocs, desc(db_pair))
View(nocs)
nocs <- arrange(nocs, desc(Nof.Docs))
View(nocs)
z <- nocs[,1]
group <- as.numeric(nocs[,2])
m <- median(z)
fisher.test(as.numeric(z < m), as.numeric(group))$p.value
sample
?sample
nocs_tm <- sample_n(tm_vs_imex[tm_vs_imex$db_pair == "tm",2],10000)
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2],10000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2],10000)
mood.test(nocs_both,nocs_tm,alternative="two.sided")
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2],10000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2],10000)
mood.test(nocs_both,nocs_tm,alternative="two.sided")
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2],10000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2],10000)
mood.test(nocs_both,nocs_tm,alternative="two.sided")
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2],100000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2],10000)
mood.test(nocs_both,nocs_tm,alternative="two.sided")
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2],10000)
mood.test(nocs_both,nocs_tm,alternative="two.sided")
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2], 500000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2],10000)
mood.test(nocs_both,nocs_tm,alternative="two.sided")
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2], 200000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2],10000)
mood.test(nocs_both,nocs_tm,alternative="two.sided")
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2], 10000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2],10000)
mood.test(nocs_both,nocs_tm,alternative="two.sided")
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2], 20000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])
mood.test(nocs_both,nocs_tm,alternative="two.sided")
View(head(tm_full,100))
View(head(tm_full_pair_info,100))
tm_pairs <- unique(select(tm_full,pair_id))
tm_pairs$tm_epmc <- 1
write.table(tm_pairs,"./results/pairs_tm.txt",col.names=T,row.names=F,quote=F,sep="\t")
library(dplyr)
tm_pairs <- unique(select(tm_full,pair_id))
tm_pairs$tm_epmc <- 1
write.table(tm_pairs,"./results/pairs_tm.txt",col.names=T,row.names=F,quote=F,sep="\t")
if(!file.exists("./source_files/PMID_PMCID_DOI.csv.gz")){
download.file(url="ftp://ftp.ebi.ac.uk/pub/databases/pmc/DOI/PMID_PMCID_DOI.csv.gz", destfile="./source_files/PMID_PMCID_DOI.csv.gz",method="curl")
}
library("data.table")
system("gunzip ./source_files/PMID_PMCID_DOI.csv.gz")
map_pub <- fread("./source_files/PMID_PMCID_DOI_9.csv",header=T,sep=",",stringsAsFactors=F)
map_pub <- fread("./source_files/PMID_PMCID_DOI.csv",header=T,sep=",",stringsAsFactors=F)
View(head(map_pub,100))
tm_pmcids <- unique(select(tm_full,PMCIDs))
library(dplyr)
tm_pmcids <- unique(select(tm_full,PMCIDs))
map_pub_sel <- unique(select(map_pub,PMID,PMCID))
View(head(map_pub_sel,100))
rm(map_pub)
tm_pmcids2pmids <- merge(tm_pmcids,map_pub_sel,by.x="PMCIDs",by.y="PMCID",all.x=T,all.y=F)
View(tm_pmcids2pmids)
View(head(tm_pmcids2pmids,200))
tm_pmcids2pmids <- mutate(tm_pmcids2pmids, PMID =
ifelse(is.na(PMID), PMCIDs,
PMID))))
tm_pmcids2pmids <- mutate(tm_pmcids2pmids, PMID =
ifelse(is.na(PMID), PMCIDs,
PMID))
View(head(tm_pmcids2pmids,200))
rm(map_pub_sel)
tm_sel <- unique(select(tm_full,pair_id,tm,Nof.Docs,Nof.co.occr.in.Title.Abs,Nof.co.occr.in.Body,PMCIDs))
tm_sel_map <- unique(merge(tm_sel,tm_pmcids2pmids,by="PMCIDs",all.x=T,all.y=F))
library(dplyr)
imex_human <- unique(subset(imex_full,taxid_a=="9606" & taxid_b=="9606"))
imex_sel <- unique(select(imex_human,pair_id_clean,pair_id_clean,id_a_clean,id_b_clean,taxid_a,taxid_b,pubid))
imex_sel$imex <- "yes"
imex_pairs <- unique(select(imex_sel, pair_id=pair_id_clean,imex))
comp <- unique(merge(tm_full_pair_info,imex_pairs,by="pair_id",all=T))
comp <- mutate(comp, db_pair =
ifelse(tm == "yes" & is.na(imex), "tm",
ifelse(is.na(tm) & imex == "yes", "imex",
ifelse(tm == "yes" & imex == "yes", "tm & imex",
"check"))))
comp$db_pair <- as.factor(comp$db_pair)
comp <- mutate(comp, nr_oc_group =
ifelse(Nof.Docs <= 5, Nof.Docs, "over 5"))
table(comp$db_pair,useNA="ifany")
comp_simple <- unique(select(comp, pair_id,db_pair))
write.table(comp_simple,"./results/pairs_tm_vs_imex.txt",col.names=T,row.names=F,quote=F,sep="\t")
tm_vs_imex <- unique(subset(comp, db_pair == "tm" | db_pair == "tm & imex"))
g3 <- ggplot(data=tm_vs_imex, aes(x=db_pair,y=Nof.Docs))
g3 <- g3 + geom_violin(aes(fill=db_pair))
g3 <- g3 + scale_fill_manual(values=c("#56B4E9","#E69F00"),
labels=c("Found in IMEx", "text-mined only"))
g3 <- g3 + scale_y_log10(breaks=c(10,100,1000,10000),
labels=function(n){format(n, scientific = FALSE)})
g3 <- g3 + labs(title ="Number of occurrences in EPMC in the IMEx and text-mined groups", y = "Number of occurrences (log scale)", x="group")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2]), colour="#56B4E9", linetype="dashed")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2]), colour="#E69F00", linetype="dashed")
g3 <- g3 + annotate("text", x=0.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])+0.5, label = "EPMC-only\nmedian", colour="#56B4E9")
g3 <- g3 + annotate("text", x=1.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])+0.7, label = "Found in IMEx\nmedian", colour="#E69F00")
g3 <- g3 + theme(legend.position="none")
g3
library(ggplot2)
tm_vs_imex <- unique(subset(comp, db_pair == "tm" | db_pair == "tm & imex"))
g3 <- ggplot(data=tm_vs_imex, aes(x=db_pair,y=Nof.Docs))
g3 <- g3 + geom_violin(aes(fill=db_pair))
g3 <- g3 + scale_fill_manual(values=c("#56B4E9","#E69F00"),
labels=c("Found in IMEx", "text-mined only"))
g3 <- g3 + scale_y_log10(breaks=c(10,100,1000,10000),
labels=function(n){format(n, scientific = FALSE)})
g3 <- g3 + labs(title ="Number of occurrences in EPMC in the IMEx and text-mined groups", y = "Number of occurrences (log scale)", x="group")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2]), colour="#56B4E9", linetype="dashed")
g3 <- g3 + geom_hline(yintercept=median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2]), colour="#E69F00", linetype="dashed")
g3 <- g3 + annotate("text", x=0.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm",2])+0.5, label = "EPMC-only\nmedian", colour="#56B4E9")
g3 <- g3 + annotate("text", x=1.75, median(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])+0.7, label = "Found in IMEx\nmedian", colour="#E69F00")
g3 <- g3 + theme(legend.position="none")
g3
bartlett.test(tm_vs_imex[,2], tm_vs_imex[,8])
nocs_tm <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm",2], 20000)
nocs_both <- sample(tm_vs_imex[tm_vs_imex$db_pair == "tm & imex",2])
mood.test(nocs_both,nocs_tm,alternative="two.sided")
tm_full <- read.csv("./processed_files/tm_full_single.txt", sep = "\t", header = T, colClasses="character")
tm_full$Nof.Docs <- as.numeric(tm_full$Nof.Docs)
tm_full$Nof.co.occr.in.Title.Abs <- as.numeric(tm_full$Nof.co.occr.in.Title.Abs)
tm_full$Nof.co.occr.in.Body <- as.numeric(tm_full$Nof.co.occr.in.Body)
tm_full <- tm_full[order(as.numeric(tm_full$Nof.Docs),decreasing=T),]
library(dplyr)
tm_pairs <- unique(select(tm_full,pair_id))
tm_pairs$tm_epmc <- 1
tm_full$pair_id <- apply(tm_full[,1:2], 1,function(i){
paste(sort(i),collapse = "_")
})
tm_full$tm <- "yes"
library(dplyr)
tm_pairs <- unique(select(tm_full,pair_id))
tm_pairs$tm_epmc <- 1
library("data.table")
system("gunzip ./source_files/PMID_PMCID_DOI.csv.gz")
map_pub <- fread("./source_files/PMID_PMCID_DOI.csv",header=T,sep=",",stringsAsFactors=F)
map_pub_sel <- unique(select(map_pub,PMID,PMCID))
rm(map_pub)
system("rm ./source_files/PMID_PMCID_DOI.csv")
tm_pmcids <- unique(select(tm_full,PMCIDs))
tm_pmcids2pmids <- merge(tm_pmcids,map_pub_sel,by.x="PMCIDs",by.y="PMCID",all.x=T,all.y=F)
tm_pmcids2pmids <- mutate(tm_pmcids2pmids, PMID =
ifelse(is.na(PMID), PMCIDs,
PMID))
rm(map_pub_sel)
tm_full_map <- unique(merge(tm_full,tm_pmcids2pmids,by="PMCIDs",all.x=T,all.y=F))
tm_sel <- unique(select(tm_full_map,pair_id,tm,Nof.Docs,Nof.co.occr.in.Title.Abs,Nof.co.occr.in.Body,PMCIDs))
View(head(tm_sel,100))
tm_full$tm <- 1
tm_full_map <- unique(merge(tm_full,tm_pmcids2pmids,by="PMCIDs",all.x=T,all.y=F))
tm_sel <- unique(select(tm_full_map,pair_id,tm,Nof.Docs,Nof.co.occr.in.Title.Abs,Nof.co.occr.in.Body,PMCIDs))
tm_sel <- unique(select(tm_full_map,pair_id,pmid=PMCIDs,tm,Nof.Docs,Nof.co.occr.in.Title.Abs,Nof.co.occr.in.Body))
View(head(tm_sel,100))
View(head(tm_full_map,100))
write.table(tm_sel,"./results/pairs_pmids_tm.txt",col.names=T,row.names=F,quote=F,sep="\t")
system("gzip ./results/pairs_pmids_tm.txt")
require(data.table)
tm_sel <- fread('zcat ./source_files/PPI_tm_Nov16.txt.tar.gz', sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
setwd("./source_files/")
tm_sel <- fread('zcat PPI_tm_Nov16.txt.tar.gz', sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
setwd("../")
tm_sel <- fread(gz('PPI_tm_Nov16.txt.tar.gz'), sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
tm_sel <- fread(untar('PPI_tm_Nov16.txt.tar.gz'), sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
tm_sel <- fread(untar("./source_files/PPI_tm_Nov16.txt.tar.gz"), sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
tm_sel <- fread(gzip("./source_files/PPI_tm_Nov16.txt.tar.gz"), sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
setwd("./source_files/")
system("tar xf PPI_tm_Nov16.txt.tar.gz")
tm_sel <- fread("./source_files/PPI_tm_Nov16.txt", sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
system("rm ./source_files/PPI_tm_Nov16.txt")
setwd("../")
tm_sel <- fread("PPI_tm_Nov16.txt", sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
setwd("./source_files/")
tm_sel <- fread("PPI_tm_Nov16.txt", sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
tm_sel <- fread("PPI_tm_Nov16_corr.txt", sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
tm_sel <- fread("PPI_tm_Nov16_corr.txt", sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
tm_sel <- fread("PPI_tm_Nov16.txt", sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
system("perl -i.bak -pe 's/According to Bia et\n/According to Bia et/' PPI_tm_Nov16.txt")
tm_sel <- fread("PPI_tm_Nov16.txt", sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
system("perl -i -pe 's/Lichty et\n/Lichty et/' PPI_tm_Nov16.txt")
tm_sel <- fread("PPI_tm_Nov16.txt", sep = "\t", header = T, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
system("rm PPI_tm_Nov16.txt")
setwd("../")
View(tm_sel)
setwd("./source_files/")
system("tar xf PPI_tm_Nov16.txt.tar.gz")
# I need to clean up several undesired line breaks in the file
system("perl -i -pe 's/Mauviel et\n/Mauviel et/' PPI_tm_Nov16.txt")
system("perl -i -pe 's/According to Bia et\n/According to Bia et/' PPI_tm_Nov16.txt")
system("perl -i -pe 's/Lichty et\n/Lichty et/' PPI_tm_Nov16.txt")
tm_sel <- fread("PPI_tm_Nov16.txt", sep = "\t", header = F, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
system("rm PPI_tm_Nov16.txt")
setwd("../")
View(tm_sel)
colnames(tm_sel) <- c("pmcid","pmid","date","upacs","location","symbols")
tm_sel$upacs_1 <- gsub("\|\|.*","",tm_sel$upacs)
tm_sel$upacs_1 <- gsub("\\|\\|.*","",tm_sel$upacs)
tm_sel$upacs_2 <- gsub(".*\\|\\|","",tm_sel$upacs)
tm_sel$upacs_1 <- strsplit(gsub("\\|\\|.*","",tm_sel$upacs),",")
tm_sel$upacs_2 <- strsplit(gsub(".*\\|\\|","",tm_sel$upacs),",")
str(tm_sel)
tm_sel$upacs_1 <- gsub("\\|\\|.*","",tm_sel$upacs)
tm_sel$upacs_2 <- gsub(".*\\|\\|","",tm_sel$upacs)
library(splitstackshape)
install.packages("splitstackshape")
library(splitstackshape)
tm_long_pt1 <- cSplit(tm_sel, "upacs_1", sep = ",", direction = "long")
View(tm_long_pt1)
tm_long <- cSplit(tm_sel, "upacs_2", sep = ",", direction = "long")
View(tm_long)
tm_long <- cSplit(tm_long_pt1, "upacs_2", sep = ",", direction = "long")
tm_long$pair_id <- apply(tm_full[,1:2], 1,function(i){
paste(sort(i),collapse = "_")
})
tm_long$tm <- 1
tm_long$pair_id <- apply(tm_long[,1:2], 1,function(i){
paste(sort(i),collapse = "_")
})
tm_long$tm <- 1
tm_long <- cSplit(tm_long_pt1, "upacs_2", sep = ",", direction = "long")
tm_long$pair_id <- apply(tm_long[,7:8], 1,function(i){
paste(sort(i),collapse = "_")
})
dim(tm_long[,7:8])
is.vector(tm_long[,7:8])
head(tm_long[,7:8])
head(tm_long[,c(7,8)])
head(tm_long[,])
head(tm_long[,1])
head(tm_long[1,])
head(tm_long[,6])
head(tm_long[,upacs_1])
str(tm_long)
tm_sel$upac_1 <- gsub("\\|\\|.*","",tm_sel$upacs)
tm_sel$upac_2 <- gsub(".*\\|\\|","",tm_sel$upacs)
library(splitstackshape)
tm_long_pt1 <- cSplit(tm_sel, "upac_1", sep = ",", direction = "long")
tm_long <- cSplit(tm_long_pt1, "upac_2", sep = ",", direction = "long")
View(tm_long_pt1)
setwd("./source_files/")
system("tar xf PPI_tm_Nov16.txt.tar.gz")
# I need to clean up several undesired line breaks in the file
system("perl -i -pe 's/Mauviel et\n/Mauviel et/' PPI_tm_Nov16.txt")
system("perl -i -pe 's/According to Bia et\n/According to Bia et/' PPI_tm_Nov16.txt")
system("perl -i -pe 's/Lichty et\n/Lichty et/' PPI_tm_Nov16.txt")
tm_sel <- fread("PPI_tm_Nov16.txt", sep = "\t", header = F, colClasses=c("character","character","character","character","NULL","character","character","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"),data.table = F)
system("rm PPI_tm_Nov16.txt")
setwd("../")
colnames(tm_sel) <- c("pmcid","pmid","date","upacs","location","symbols")
tm_sel$upac_1 <- gsub("\\|\\|.*","",tm_sel$upacs)
tm_sel$upac_2 <- gsub(".*\\|\\|","",tm_sel$upacs)
library(splitstackshape)
tm_long_pt1 <- cSplit(tm_sel, "upac_1", sep = ",", direction = "long")
tm_long <- cSplit(tm_long_pt1, "upac_2", sep = ",", direction = "long")
tm_long$upac_1 <- as.character(tm_long$upac_1)
tm_long$upac_2 <- as.character(tm_long$upac_2)
head(tm_long[,6])
head(tm_long[,c(7,8)])
str(tm_long)
dim(tm_long[,c(7,8)])
dim(tm_long[,7:8])
is.vector(tm_long[,7:8])
is.matrix(tm_long[,7:8])
dim(tm_long[,c("upac_1","upac_2")])
head(tm_long[,c("upac_1","upac_2")])
tm_long[,7:8]
tm_long[7:8,]
library(dplyr)
library(dplyr)
tm_long$pair_id <- apply(select(tm_long,upac_1,upac_2), 1,function(i){
paste(sort(i),collapse = "_")
})
View(tm_long)
tm_long$tm <- 1
tm_lite <- unique(select(tm_long,pair_id,pmid,tm))
write.table(tm_lite,"./results/pairs_pmids_tm.txt",col.names=T,row.names=F,quote=F,sep="\t")
system("gzip ./results/pairs_pmids_tm.txt")
system("gzip ./results/pairs_pmids_tm.txt")
knitr::purl("tm_epmc_tr.Rmd",output="tm_epmc_tr.R")
require(data.table)
unlink('tm_epmc_tr_it2_cache', recursive = TRUE)
require(data.table)
setwd("./source_files/")
system("tar xf OA.PPI.Jan.txt.gz")
system("gunzip xf OA.PPI.Jan.txt.gz")
system("gunzip OA.PPI.Jan.txt.gz")
setwd("./source_files/")
system("gunzip OA.PPI.Jan.txt.gz")
setwd("./source_files/")
system("gunzip OA.PPI.Jan.txt.gz")
options(width = 80)
system("gunzip -c OA.PPI.Jan.txt.gz > OA.PPI.Jan.txt")
tm_sel <- fread("OA.PPI.Jan.txt", sep = "\t", header = F, colClasses=c("character","character","character","character","NULL","character","character","NULL","character"),data.table = F)
tm_sel <- fread("./source_files/OA.PPI.Jan.txt", sep = "\t", header = F, colClasses=c("character","character","character","character","NULL","character","character","NULL","character"),data.table = F)
View(tm_sel)
opts_knit$set(root.dir = "./source_files/")
require(data.table)
setwd("./source_files/")
system("gunzip -c OA.PPI.Jan.txt.gz > OA.PPI.Jan.txt")
# I need to clean up several undesired line breaks in the file
#system("perl -i -pe 's/Mauviel et\n/Mauviel et/' PPI_tm_Nov16.txt")
#system("perl -i -pe 's/According to Bia et\n/According to Bia et/' PPI_tm_Nov16.txt")
#system("perl -i -pe 's/Lichty et\n/Lichty et/' PPI_tm_Nov16.txt")
tm_sel <- fread("./OA.PPI.Jan.txt", sep = "\t", header = F, colClasses=c("character","character","character","character","NULL","character","character","NULL","character"),data.table = F)
system("rm OA.PPI.Jan.txt")
setwd("../")
colnames(tm_sel) <- c("pmcid","pmid","date","upacs","location","symbols","method_term")
tm_sel$upac_1 <- gsub("\\|\\|.*","",tm_sel$upacs)
tm_sel$upac_2 <- gsub(".*\\|\\|","",tm_sel$upacs)
library(splitstackshape)
tm_long_pt1 <- cSplit(tm_sel, "upac_1", sep = ",", direction = "long")
tm_long <- cSplit(tm_long_pt1, "upac_2", sep = ",", direction = "long")
tm_long$upac_1 <- as.character(tm_long$upac_1)
tm_long$upac_2 <- as.character(tm_long$upac_2)
View(tm_long)
library(dplyr)
tm_long$pair_id <- apply(select(tm_long,upac_1,upac_2), 1,function(i){
paste(sort(i),collapse = "_")
})
tm_long$tm <- 1
View(tm_long)
tm_lite <- unique(select(tm_long,pair_id,pmid,method_term,tm))
tm_lite <- unique(select(tm_long,pair_id,pmid,method_term,tm))
write.table(tm_lite,"./results/pairs_pmids_tm_it2.txt",col.names=T,row.names=F,quote=F,sep="\t")
system("gzip ./results/pairs_pmids_tm_it2.txt")
tm_lite <- unique(select(tm_long,pair_id,pmid,tm,method_term))
write.table(tm_lite,"./results/pairs_pmids_tm_it2.txt",col.names=T,row.names=F,quote=F,sep="\t")
system("gzip ./results/pairs_pmids_tm_it2.txt")
View(tm_lite)
tm_lite <- unique(select(tm_long,pair_id,pmid,tm,method_term))
write.table(tm_lite,"./results/pairs_pmids_tm_it2.txt",col.names=T,row.names=F,quote=F,sep="\t")
system("gzip ./results/pairs_pmids_tm_it2.txt")
frq_met <- fread("./source_files/freq.met.txt",header=F,sep="\t",data.table = F)
freq_met <- fread("./source_files/freq.met.txt",header=F,sep="\t",data.table = F)
rm(frq_met)
View(freq_met)
str(freq_met)
colnames(freq_met) <- c("method","freq")
install.packages("wordcloud")
require(wordcloud)
wordcloud(freq_met)
wordcloud(words=freq_met$method,freq=freq_met$freq)
wordcloud(words=freq_met$method,freq=freq_met$freq,max.words = 200)
wordcloud(words=freq_met$method,freq=freq_met$freq,max.words = 200,colors=brewer.pal(6,”Dark2″))
wordcloud(words=freq_met$method,freq=freq_met$freq,max.words = 200,colors=brewer.pal(6,"Dark2"))
wordcloud(words=freq_met$method,freq=freq_met$freq,max.words = 150,colors=brewer.pal(6,"Dark2"))
wordcloud(words=freq_met$method,freq=freq_met$freq,max.words = 100,colors=brewer.pal(6,"Dark2"))
wordcloud(words=freq_met$method,freq=freq_met$freq,max.words = 100,colors=brewer.pal(8,"Dark2"))
set.seed(88)
wordcloud(words=freq_met$method,freq=freq_met$freq,max.words = 100,colors=brewer.pal(8,"Dark2"))
system("gzip ./source_files/PPI_Iter3.txt")
View(tm_sel)
View(tm_lite)
View(tm_sel)
publs <- unique(tm_long$pmid)
pairs <- unique(tm_long$pair_id)
