---
system("perl ./scripts/reactome_prot_cleaner.pl ./source_files/rr.proteins.txt ./processed_files/rr.proteins.clean.txt")
rr_prots <- read.delim("./processed_files/rr.proteins.clean.txt", header = F, sep = "\t", colClasses = "character")
system("rm ./processed_files/rr.proteins.clean.txt")
colnames(rr_prots) <- c("upac","upac_clean","rr_id", "type")
library(dplyr)
rr_prots <- unique(select(rr_prots,upac=upac_clean,rr_id,type))
rr_pmids <- read.delim("./source_files/rr.pubmed.txt", header = F, sep = "\t", colClasses = "character")
colnames(rr_pmids) <- c("rr_id", "pmid")
rr_upacs <- unique(data.frame(rr_prots$upac))
rr_up_taxid <- read.delim("./processed_files/rr.up_taxid_clean.txt", header = T, sep = "\t", colClasses = "character")
rr_up_human <- data.frame(rr_up_taxid[rr_up_taxid$Organism.ID == 9606,1])
colnames(rr_up_human) <- c("upac")
rr_prots_human <- unique(merge(rr_up_human, rr_prots, by = "upac", all.x=T, all.y=F))
rr_reacts_human <- unique(data.frame(rr_prots_human$rr_id))
colnames(rr_reacts_human) <- "rr_id"
rr_pmids_human <- unique(merge(rr_reacts_human, rr_pmids, by="rr_id", all=F))
react_pmids_human <- unique(subset(rr_pmids_human, !is.na(rr_pmids_human$pmid), select = "pmid"))
react_pmids_human$reactome <- "yes"
knitr::purl("./reactome_vs_imex_lean.Rmd",output="./reactome_vs_imex_lean.R")
system("perl ./scripts/reactome_prot_cleaner.pl ./source_files/rr.proteins.txt ./processed_files/rr.proteins.clean.txt")
rr_prots <- read.delim("./processed_files/rr.proteins.clean.txt", header = F, sep = "\t", colClasses = "character")
system("rm ./processed_files/rr.proteins.clean.txt")
colnames(rr_prots) <- c("upac","upac_clean","rr_id", "type")
library(dplyr)
rr_prots <- unique(select(rr_prots,upac=upac_clean,rr_id,type))
rr_pmids <- read.delim("./source_files/rr.pubmed.txt", header = F, sep = "\t", colClasses = "character")
colnames(rr_pmids) <- c("rr_id", "pmid")
rr_upacs <- unique(data.frame(rr_prots$upac))
write.table(rr_upacs, "./processed_files/rr.upacs.txt", quote = F, row.names = F, col.names = F)
system("perl ./scripts/multiplier.pl ./processed_files/rr.up_taxid_man.txt ./processed_files/rr.up_taxid_clean.txt")
rr_up_taxid <- read.delim("./processed_files/rr.up_taxid_clean.txt", header = T, sep = "\t", colClasses = "character")
rr_up_human <- data.frame(rr_up_taxid[rr_up_taxid$Organism.ID == 9606,1])
colnames(rr_up_human) <- c("upac")
View(rr_up_taxid)
system("perl ./scripts/multiplier.pl ./processed_files/rr.up_taxid_man.txt ./processed_files/rr.up_taxid_clean.txt")
rr_up_taxid <- read.delim("./processed_files/rr.up_taxid_clean.txt", header = T, sep = "\t", colClasses = "character")
rr_up_human <- data.frame(rr_up_taxid[rr_up_taxid$Organism.ID == 9606,1])
colnames(rr_up_human) <- c("upac")
rr_prots_human <- unique(merge(rr_up_human, rr_prots, by = "upac", all.x=T, all.y=F))
rr_reacts_human <- unique(data.frame(rr_prots_human$rr_id))
colnames(rr_reacts_human) <- "rr_id"
rr_pmids_human <- unique(merge(rr_reacts_human, rr_pmids, by="rr_id", all=F))
react_pmids_human <- unique(subset(rr_pmids_human, !is.na(rr_pmids_human$pmid), select = "pmid"))
react_pmids_human$reactome <- "yes"
## ----eval=TRUE-----------------------------------------------------------
rr_p_h_input <- data.frame(rr_prots_human[rr_prots_human$type == "INPUT",1:2])
rr_p_h_output <- data.frame(rr_prots_human[rr_prots_human$type == "OUTPUT",1:2])
rr_p_h_catalyst <- data.frame(rr_prots_human[rr_prots_human$type == "CATALYST",1:2])
## ----eval=TRUE-----------------------------------------------------------
rr_pair_inout <- unique(merge(rr_p_h_input, rr_p_h_output, by="rr_id", all=F))
rr_pair_incat <- unique(merge(rr_p_h_input, rr_p_h_catalyst, by="rr_id", all=F))
rr_pair_outcat <- unique(merge(rr_p_h_output, rr_p_h_catalyst, by="rr_id", all=F))
rr_pairs_1 <- unique(rbind(rr_pair_inout, rr_pair_incat))
rr_pairs <- unique(rbind(rr_pairs_1, rr_pair_outcat))
## ------------------------------------------------------------------------
rr_pairs_pmid_all <- unique(merge(rr_pairs, rr_pmids_human, by="rr_id",all=F))
## ----message=FALSE,warning=FALSE-----------------------------------------
library(dplyr)
rr_pairs_pmid_all$pair_id <- apply(rr_pairs_pmid_all[,2:3], 1,function(i){
paste(sort(i),collapse = "_")
})
reactome_pairs_pmid <- unique(select(rr_pairs_pmid_all, pair_id, pmid))
reactome_pairs_pmid$reactome <- 1
write.table(reactome_pairs_pmid,"./results/pairs_pmid_reactome.txt",col.names=T,row.names=F,quote=F,sep="\t")
system("gzip ./results/pairs_pmid_reactome.txt")
View(rr_up_taxid)
rr_up_human <- data.frame(rr_up_taxid[rr_up_taxid$Organism.ID == 9606,1])
colnames(rr_up_human) <- c("upac")
rr_prots_human <- unique(merge(rr_up_human, rr_prots, by = "upac", all.x=T, all.y=F))
rr_reacts_human <- unique(data.frame(rr_prots_human$rr_id))
colnames(rr_reacts_human) <- "rr_id"
View(rr_reacts_human)
rr_pmids_human <- unique(merge(rr_reacts_human, rr_pmids, by="rr_id", all=F))
View(rr_reacts_human)
View(rr_pmids)
View(rr_pmids)
View(rr_prots)
rr_prots <- read.delim("./processed_files/rr.proteins.clean.txt", header = F, sep = "\t", colClasses = "character")
system("rm ./processed_files/rr.proteins.clean.txt")
colnames(rr_prots) <- c("upac","upac_clean","rr_id", "type")
colnames(rr_prots) <- c("upac","type", "rr_id")
rr_pmids <- read.delim("./source_files/rr.pubmed.txt", header = F, sep = "\t", colClasses = "character")
colnames(rr_pmids) <- c("rr_id", "pmid")
rr_upacs <- unique(data.frame(rr_prots$upac))
write.table(rr_upacs, "./processed_files/rr.upacs.txt", quote = F, row.names = F, col.names = F)
rr_up_taxid <- read.delim("./processed_files/rr.up_taxid_clean.txt", header = T, sep = "\t", colClasses = "character")
rr_up_human <- data.frame(rr_up_taxid[rr_up_taxid$Organism.ID == 9606,1])
colnames(rr_up_human) <- c("upac")
rr_prots_human <- unique(merge(rr_up_human, rr_prots, by = "upac", all.x=T, all.y=F))
rr_reacts_human <- unique(data.frame(rr_prots_human$rr_id))
colnames(rr_reacts_human) <- "rr_id"
rr_pmids_human <- unique(merge(rr_reacts_human, rr_pmids, by="rr_id", all=F))
react_pmids_human <- unique(subset(rr_pmids_human, !is.na(rr_pmids_human$pmid), select = "pmid"))
react_pmids_human$reactome <- "yes"
rr_p_h_input <- data.frame(rr_prots_human[rr_prots_human$type == "INPUT",1:2])
unique(rr_prots_human$type)
rr_p_h_input <- data.frame(rr_prots_human[rr_prots_human$type == "input",1:2])
rr_p_h_output <- data.frame(rr_prots_human[rr_prots_human$type == "output",1:2])
rr_p_h_catalyst <- data.frame(rr_prots_human[rr_prots_human$type == "catalystActivity",1:2])
rr_pair_inout <- unique(merge(rr_p_h_input, rr_p_h_output, by="rr_id", all=F))
rr_pair_incat <- unique(merge(rr_p_h_input, rr_p_h_catalyst, by="rr_id", all=F))
rr_pair_outcat <- unique(merge(rr_p_h_output, rr_p_h_catalyst, by="rr_id", all=F))
rr_pairs_1 <- unique(rbind(rr_pair_inout, rr_pair_incat))
rr_pairs <- unique(rbind(rr_pairs_1, rr_pair_outcat))
## ------------------------------------------------------------------------
rr_pairs_pmid_all <- unique(merge(rr_pairs, rr_pmids_human, by="rr_id",all=F))
View(rr_p_h_input)
View(rr_prots_human)
rr_p_h_input <- data.frame(rr_prots_human[rr_prots_human$type == "input",c(1,3)])
rr_p_h_output <- data.frame(rr_prots_human[rr_prots_human$type == "output",c(1,3)])
rr_p_h_catalyst <- data.frame(rr_prots_human[rr_prots_human$type == "catalystActivity",c(1,3)])
rr_pair_inout <- unique(merge(rr_p_h_input, rr_p_h_output, by="rr_id", all=F))
rr_pair_incat <- unique(merge(rr_p_h_input, rr_p_h_catalyst, by="rr_id", all=F))
rr_pair_outcat <- unique(merge(rr_p_h_output, rr_p_h_catalyst, by="rr_id", all=F))
rr_pairs_1 <- unique(rbind(rr_pair_inout, rr_pair_incat))
rr_pairs <- unique(rbind(rr_pairs_1, rr_pair_outcat))
## ------------------------------------------------------------------------
rr_pairs_pmid_all <- unique(merge(rr_pairs, rr_pmids_human, by="rr_id",all=F))
## ----message=FALSE,warning=FALSE-----------------------------------------
library(dplyr)
rr_pairs_pmid_all$pair_id <- apply(rr_pairs_pmid_all[,2:3], 1,function(i){
paste(sort(i),collapse = "_")
})
reactome_pairs_pmid <- unique(select(rr_pairs_pmid_all, pair_id, pmid))
reactome_pairs_pmid$reactome <- 1
write.table(reactome_pairs_pmid,"./results/pairs_pmid_reactome.txt",col.names=T,row.names=F,quote=F,sep="\t")
system("gzip ./results/pairs_pmid_reactome.txt")
system("gzip ./results/pairs_pmid_reactome.txt")
View(rr_pmids)
library(data.table)
test <- fread("./source_files/rr.pubmed.txt",header = F, sep = "\t", colClasses = c("character",NULL))
View(test)
test <- fread("./source_files/rr.pubmed.txt",header = F, sep = "\t", colClasses = c("character","NULL"))
View(test)
rm(test)
uniprot = UniProt.ws(taxId=9606)
library(UniProt.ws)
library(UniProt.ws)
uniprot = UniProt.ws(taxId=9606)
keytypes(uniprot)
entrezgene2uniprot_temp <- as.data.table(select(uniprot,
keys = pairs_entrezgene_id,
columns = c("ENTREZ_GENE", "UNIPROTKB"),
keytype = "UNIPROTKB"))
columns(uniprot)
proteins = homo_sapiens_interactions[,gsub("\\-.+$","",gsub("^uniprotkb:","",grep("uniprotkb",unique(c(`#ID(s) interactor A`,`ID(s) interactor B`)),value = T)))]
library(data.table)
library(UniProt.ws)
homo_sapiens_interactions = fread("./source_files/homo_sapiens_interactions.txt", colClasses = "character",sep = "\t", quote = "")
# view which types of interactions are present
homo_sapiens_interactions[,table(`Interaction type(s)`)]
homo_sapiens_interactions[,table(`Host organism(s)`)]
# identify which interacting partners
homo_sapiens_interactions[,table(gsub(":.+$","",unique(c(`#ID(s) interactor A`,`ID(s) interactor B`))))]
proteins = homo_sapiens_interactions[,gsub("\\-.+$","",gsub("^uniprotkb:","",grep("uniprotkb",unique(c(`#ID(s) interactor A`,`ID(s) interactor B`)),value = T)))]
write(homo_sapiens_interactions[,gsub("\\-.+$","",gsub("^uniprotkb:","",grep("uniprotkb",unique(c(`#ID(s) interactor A`,`ID(s) interactor B`)),value = T)))], "./processed_files/protein_updated_reactome.txt")
uniprot = UniProt.ws(taxId=9606)
# getting names of the keys and columns from Uniprot
# keytypes(uniprot)
# columns(uniprot)
# mapping IDs
entrezgene2uniprot_temp <- as.data.table(select(uniprot,
keys = pairs_entrezgene_id,
columns = c("ORGANISM", "UNIPROTKB"),
keytype = "UNIPROTKB"))
proteins2species <- as.data.table(select(uniprot,
keys = proteins,
columns = c("ORGANISM", "UNIPROTKB"),
keytype = "UNIPROTKB"))
proteins2species
proteins2species = copy(proteins2species[complete.cases(proteins2species),])
proteins2species
proteins2species <- as.data.table(select(uniprot,
keys = proteins,
columns = c("ORGANISM-ID", "UNIPROTKB"),
keytype = "UNIPROTKB"))
proteins2species = copy(proteins2species[complete.cases(proteins2species),])
proteins2species
proteins2species[,table(`ORGANISM-ID`)]
write(homo_sapiens_interactions[,gsub("\\-.+$","",gsub("^uniprotkb:","",grep("uniprotkb",unique(c(`#ID(s) interactor A`,`ID(s) interactor B`)),value = T)))], "./processed_files/protein_updated_reactome.txt")
homo_sapiens_interactions = homo_sapiens_interactions[grep("uniprotkb",`#ID(s) interactor A`),]
homo_sapiens_interactions = homo_sapiens_interactions[grep("uniprotkb",`ID(s) interactor B`),]
homo_sapiens_interactions
homo_sapiens_interactions[,`#ID(s) interactor A` := gsub("\\-.+$","",gsub("^uniprotkb:","",`#ID(s) interactor A`))]
homo_sapiens_interactions[,`ID(s) interactor B` := gsub("\\-.+$","",gsub("^uniprotkb:","",`ID(s) interactor B`))]
homo_sapiens_interactions
proteins = homo_sapiens_interactions[,unique(c(`#ID(s) interactor A`,`ID(s) interactor B`))]
write(proteins, "./processed_files/protein_updated_reactome.txt")
proteins2species
homo_sapiens_interactions[`#ID(s) interactor A` %in% proteins2species$UNIPROTKB,]
homo_sapiens_interactions = homo_sapiens_interactions[`#ID(s) interactor A` %in% proteins2species$UNIPROTKB,][`ID(s) interactor B` %in% proteins2species$UNIPROTKB,]
homo_sapiens_interactions
homo_sapiens_interactions$`Interaction Xref(s)`
homo_sapiens_interactions[, pmids := gsub("^.+pubmed:","",`Interaction Xref(s)`)]
homo_sapiens_interactions$pmids
homo_sapiens_interactions[, pmids := `Interaction Xref(s)`]
homo_sapiens_interactions$pmids
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmids := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions$pmids
homo_sapiens_interactions[, pmids := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmids := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions$pmids
homo_sapiens_interactions[, sum(pmids == "")]
homo_sapiens_interactions[, sum(pmids != "")]
homo_sapiens_interactions = homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmids = unlist(gsubfn::strapplyc(pmids,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmids]
install.packages("gsubfn")
homo_sapiens_interactions[, pmids := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmids := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions = homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmids = unlist(gsubfn::strapplyc(pmids,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmids]
install.packages("tcltk")
library(data.table)
library(UniProt.ws)
homo_sapiens_interactions = fread("./source_files/homo_sapiens_interactions.txt", colClasses = "character",sep = "\t", quote = "")
# view which types of interactions are present
homo_sapiens_interactions[,table(`Interaction type(s)`)]
homo_sapiens_interactions[,table(`Host organism(s)`)]
# identify which interacting partners
homo_sapiens_interactions[,table(gsub(":.+$","",unique(c(`#ID(s) interactor A`,`ID(s) interactor B`))))]
# clean interactor ids from prefix and isoform id and filter out non-uniprot pairs
homo_sapiens_interactions = homo_sapiens_interactions[grep("uniprotkb",`#ID(s) interactor A`),]
homo_sapiens_interactions = homo_sapiens_interactions[grep("uniprotkb",`ID(s) interactor B`),]
homo_sapiens_interactions[,`#ID(s) interactor A` := gsub("\\-.+$","",gsub("^uniprotkb:","",`#ID(s) interactor A`))]
homo_sapiens_interactions[,`ID(s) interactor B` := gsub("\\-.+$","",gsub("^uniprotkb:","",`ID(s) interactor B`))]
proteins = homo_sapiens_interactions[,unique(c(`#ID(s) interactor A`,`ID(s) interactor B`))]
write(proteins, "./processed_files/protein_updated_reactome.txt")
uniprot = UniProt.ws(taxId=9606)
# getting names of the keys and columns from Uniprot
# keytypes(uniprot)
# columns(uniprot)
# mapping IDs
proteins2species <- as.data.table(select(uniprot,
keys = proteins,
columns = c("ORGANISM-ID", "UNIPROTKB"),
keytype = "UNIPROTKB"))
# Filter non-mapped proteins (e.g. non-human)
proteins2species = copy(proteins2species[complete.cases(proteins2species),])
proteins2species
# filter non-human only interactions:
homo_sapiens_interactions = homo_sapiens_interactions[`#ID(s) interactor A` %in% proteins2species$UNIPROTKB,][`ID(s) interactor B` %in% proteins2species$UNIPROTKB,]
homo_sapiens_interactions[, pmids := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmids := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions = homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmids = unlist(gsubfn::strapplyc(pmids,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmids]
homo_sapiens_interactions[, pmid := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmid := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmid])
homo_sapiens_interactions[, pmid := ""]
library(data.table)
library(UniProt.ws)
homo_sapiens_interactions = fread("./source_files/homo_sapiens_interactions.txt", colClasses = "character",sep = "\t", quote = "")
# view which types of interactions are present
homo_sapiens_interactions[,table(`Interaction type(s)`)]
homo_sapiens_interactions[,table(`Host organism(s)`)]
# identify which interacting partners
homo_sapiens_interactions[,table(gsub(":.+$","",unique(c(`#ID(s) interactor A`,`ID(s) interactor B`))))]
# clean interactor ids from prefix and isoform id and filter out non-uniprot pairs
homo_sapiens_interactions = homo_sapiens_interactions[grep("uniprotkb",`#ID(s) interactor A`),]
homo_sapiens_interactions = homo_sapiens_interactions[grep("uniprotkb",`ID(s) interactor B`),]
homo_sapiens_interactions[,`#ID(s) interactor A` := gsub("\\-.+$","",gsub("^uniprotkb:","",`#ID(s) interactor A`))]
homo_sapiens_interactions[,`ID(s) interactor B` := gsub("\\-.+$","",gsub("^uniprotkb:","",`ID(s) interactor B`))]
homo_sapiens_interactions[, pmid := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmid := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmid])
homo_sapiens_interactions[, pmid := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmid := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmid])
homo_sapiens_interactions[, pmid := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmid := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmid])
homo_sapiens_interactions[, pmid := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmid := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmid])
homo_sapiens_interactions[, .(ida_clean = `#ID(s) interactor A`, idb_clean = `ID(s) interactor B`, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pmid]
homo_sapiens_interactions[, pmid := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmid := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions[, pair_id := apply(data.table(ida_clean,idb_clean,stringsAsFactors = F), 1,
function(a) { z = sort(a)
paste0(z[1],"_",z[2]) })]
homo_sapiens_interactions[, pmid := ""]
homo_sapiens_interactions[grep("pubmed",`Interaction Xref(s)`), pmid := grep("pubmed",`Interaction Xref(s)`, value = T)]
homo_sapiens_interactions[, pair_id := apply(data.table(`#ID(s) interactor A`,`ID(s) interactor B`,stringsAsFactors = F), 1,
function(a) { z = sort(a)
paste0(z[1],"_",z[2]) })]
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, .(pair_id, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pair_id])
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, .(pair_id, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = rep(1, .N)), by = pair_id])
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, .(pair_id, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed\\:[[:digit:]]+",simplify = T)), reactome = 1), by = pair_id])
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[, data.table(pair_id, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pair_id])
homo_sapiens_interactions2 = copy(homo_sapiens_interactions[pmid != "",])
homo_sapiens_interactions2 = copy(homo_sapiens_interactions2[, .(pair_id, pmid = unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pair_id])
homo_sapiens_interactions2 = copy(homo_sapiens_interactions2[, .(unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pair_id])
homo_sapiens_interactions2 = homo_sapiens_interactions2[, .(unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), reactome = 1), by = pair_id]
homo_sapiens_interactions2
homo_sapiens_interactions2 = copy(homo_sapiens_interactions2[, unlist(gsubfn::strapplyc(pmid,"pubmed:[[:digit:]]+",simplify = T)), by = pair_id])
homo_sapiens_interactions2
homo_sapiens_interactions2[,reactome := 1]
colnames(homo_sapiens_interactions2)
colnames(homo_sapiens_interactions2)[2] = "pmid"
homo_sapiens_interactions2
homo_sapiens_interactions2[, pmid := gsub("pubmed:","",pmid)]
homo_sapiens_interactions2
unique(homo_sapiens_interactions2)
rbind(unique(homo_sapiens_interactions2), homo_sapiens_interactions[pmid == "", .(pair_id, pmid, reactome =1)])
