pubgroups = colnames(pubcomp_table_final)[2:ncol(pubcomp_table_final)]
pubcomp_table_final[, puboverlaps := paste0(imex, reactome, tm_epmc, iid_pred, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm)]
pubcomp_table_final[, N_puboverlaps := sum(imex, reactome, tm_epmc, iid_pred, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm), by = pair_id]
pubcomp_table_final[, N_per_puboverlaps := .N, by = puboverlaps]
pubcomp_table_final[, N_per_N_puboverlaps := .N, by = N_puboverlaps]
N_puboverlaps = unique(pubcomp_table_final[,.(N_puboverlaps, N_per_N_puboverlaps)])
N_puboverlaps = N_puboverlaps[order(N_per_N_puboverlaps, decreasing = T),]
qplot(label = N_puboverlaps$N_per_N_puboverlaps, y = N_puboverlaps$N_per_N_puboverlaps, x = N_puboverlaps$N_puboverlaps,  geom = "text") + scale_y_log10(labels = 10^c(1:7), breaks = 10^c(1:7)) +
ggtitle("The number of interacting pairs and the number of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the number of resources")+scale_x_continuous(labels = N_puboverlaps$N_puboverlaps, breaks = N_puboverlaps$N_puboverlaps)
puboverlaps = unique(pubcomp_table_final[,.(puboverlaps, N_per_puboverlaps)])
puboverlaps = puboverlaps[order(N_per_puboverlaps, decreasing = T),]
allpub_df <- list(imex_pmids,reactome_pmids,tm_pmids, EVEX_pmids, BioGRID_pmids, GO_IPI_pmids, OmniPath_interaction_pmids, OmniPath_ptm_pmids)
pubcomp_table <- Reduce(function(...) merge(..., all=TRUE), allpub_df)
# I clean and replace all NAs if present.
pubcomp_table_final <- pubcomp_table
pubcomp_table_final[is.na(pubcomp_table_final <- pubcomp_table)] <- 0
fwrite(pubcomp_table_final,"./results/pubcomp_table_final.txt",col.names=T,row.names=F,sep="\t",quote=F)
system("gzip ./results/pubcomp_table_final.txt --force")
pubgroups = colnames(pubcomp_table_final)[2:ncol(pubcomp_table_final)]
pubcomp_table_final[, puboverlaps := paste0(imex, reactome, tm_epmc, iid_pred, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm)]
pubcomp_table_final[, N_puboverlaps := sum(imex, reactome, tm_epmc, iid_pred, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm), by = pair_id]
pubcomp_table_final[, N_per_puboverlaps := .N, by = puboverlaps]
pubcomp_table_final[, N_per_N_puboverlaps := .N, by = N_puboverlaps]
N_puboverlaps = unique(pubcomp_table_final[,.(N_puboverlaps, N_per_N_puboverlaps)])
N_puboverlaps = N_puboverlaps[order(N_per_N_puboverlaps, decreasing = T),]
qplot(label = N_puboverlaps$N_per_N_puboverlaps, y = N_puboverlaps$N_per_N_puboverlaps, x = N_puboverlaps$N_puboverlaps,  geom = "text") + scale_y_log10(labels = 10^c(1:7), breaks = 10^c(1:7)) +
ggtitle("The number of interacting pairs and the number of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the number of resources")+scale_x_continuous(labels = N_puboverlaps$N_puboverlaps, breaks = N_puboverlaps$N_puboverlaps)
puboverlaps = unique(pubcomp_table_final[,.(puboverlaps, N_per_puboverlaps)])
puboverlaps = puboverlaps[order(N_per_puboverlaps, decreasing = T),]
pubgroups = colnames(pubcomp_table_final)[2:ncol(pubcomp_table_final)]
pubcomp_table_final[, puboverlaps := paste0(imex, reactome, tm_epmc, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm)]
pubcomp_table_final[, N_puboverlaps := sum(imex, reactome, tm_epmc, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm), by = pair_id]
pubcomp_table_final[, N_per_puboverlaps := .N, by = puboverlaps]
pubcomp_table_final[, N_per_N_puboverlaps := .N, by = N_puboverlaps]
N_puboverlaps = unique(pubcomp_table_final[,.(N_puboverlaps, N_per_N_puboverlaps)])
N_puboverlaps = N_puboverlaps[order(N_per_N_puboverlaps, decreasing = T),]
qplot(label = N_puboverlaps$N_per_N_puboverlaps, y = N_puboverlaps$N_per_N_puboverlaps, x = N_puboverlaps$N_puboverlaps,  geom = "text") + scale_y_log10(labels = 10^c(1:7), breaks = 10^c(1:7)) +
ggtitle("The number of interacting pairs and the number of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the number of resources")+scale_x_continuous(labels = N_puboverlaps$N_puboverlaps, breaks = N_puboverlaps$N_puboverlaps)
puboverlaps = unique(pubcomp_table_final[,.(puboverlaps, N_per_puboverlaps)])
puboverlaps = puboverlaps[order(N_per_puboverlaps, decreasing = T),]
pubcomp_table_final
pubgroups = colnames(pubcomp_table_final)[2:ncol(pubcomp_table_final)]
pubcomp_table_final[, puboverlaps := paste0(imex, reactome, tm_epmc, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm)]
pubcomp_table_final[, N_puboverlaps := sum(imex, reactome, tm_epmc, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm), by = pmid]
pubcomp_table_final[, N_per_puboverlaps := .N, by = puboverlaps]
pubcomp_table_final[, N_per_N_puboverlaps := .N, by = N_puboverlaps]
N_puboverlaps = unique(pubcomp_table_final[,.(N_puboverlaps, N_per_N_puboverlaps)])
N_puboverlaps = N_puboverlaps[order(N_per_N_puboverlaps, decreasing = T),]
qplot(label = N_puboverlaps$N_per_N_puboverlaps, y = N_puboverlaps$N_per_N_puboverlaps, x = N_puboverlaps$N_puboverlaps,  geom = "text") + scale_y_log10(labels = 10^c(1:7), breaks = 10^c(1:7)) +
ggtitle("The number of interacting pairs and the number of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the number of resources")+scale_x_continuous(labels = N_puboverlaps$N_puboverlaps, breaks = N_puboverlaps$N_puboverlaps)
puboverlaps = unique(pubcomp_table_final[,.(puboverlaps, N_per_puboverlaps)])
puboverlaps = puboverlaps[order(N_per_puboverlaps, decreasing = T),]
# Chunk 1: set-options
options(width = 80)
# Chunk 2: libraries
suppressPackageStartupMessages({
library(plyr)
library(dplyr)
library(data.table)
library(UpSetR)
library(splitstackshape)
library(ggplot2)
})
# Chunk 3
imex_full <- fread("../IMEx/results/imex_full.txt", header=T, sep="\t",colClasses="character",data.table = T)
imex_human <- unique(subset(imex_full,taxid_a=="9606" & taxid_b=="9606"))
imex_human$imex <- 1
imex_human_sel <- unique(select(imex_human,pair_id=pair_id_clean,pmid=pubid,imex))
imex_pairs <- unique(select(imex_human,pair_id=pair_id_clean,imex))
imex_pmids <- unique(select(imex_human,pmid=pubid,imex))
# Chunk 4
setwd("../reactome_interactions/results/")
system("gunzip -k pairs_pmid_reactome.txt.gz")
reactome_pairs_pmids <- fread("pairs_pmid_reactome.txt",header=T,sep="\t",colClasses=c("character","character","numeric"),data.table = T)
system("rm pairs_pmid_reactome.txt")
setwd("../../dsp_comparison/")
reactome_pairs <- unique(select(reactome_pairs_pmids,pair_id,reactome))
reactome_pmids <- unique(select(reactome_pairs_pmids,pmid,reactome))
# Chunk 5
setwd("../epmc_text_mining/results/")
system("gunzip -k pairs_pmids_tm.txt.gz")
tm_pairs_pmids <- fread("pairs_pmids_tm.txt",header=T,sep="\t",colClasses=c("character","character","numeric"),data.table = T)
system("rm pairs_pmids_tm.txt")
setwd("../../dsp_comparison/")
tm_pairs_pmids_sel <- unique(select(tm_pairs_pmids,pair_id,pmid,tm_epmc=tm))
tm_pairs <- unique(select(tm_pairs_pmids,pair_id,tm_epmc=tm))
tm_pmids <- unique(select(tm_pairs_pmids,pmid,tm_epmc=tm))
# Chunk 6
iid_pred_pairs <- fread("../iid_predictions/results/pairs_iid_pred.txt",header=T,sep="\t",colClasses=c("character","numeric"),data.table=T)
# Chunk 7
setwd("../EVEX/results/")
EVEX_pairs_pmids <- fread("pairs_pmids_EVEX_shallow.txt",header=T,sep="\t",colClasses=c("character","character","character","character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
EVEX_pairs_pmids_sel <- unique(select(EVEX_pairs_pmids, pair_id=pair_id_clean, pmid=pubid,EVEX))
EVEX_pairs <- unique(select(EVEX_pairs_pmids, pair_id=pair_id_clean,EVEX))
EVEX_pmids <- unique(select(EVEX_pairs_pmids, pmid=pubid,EVEX))
# Chunk 8
setwd("../BioGRID/results/")
BioGRID_pairs_pmids <- fread("pairs_pmids_biogrid.txt",header=T,sep="\t",colClasses=c("character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
BioGRID_pairs_pmids_sel <- unique(select(BioGRID_pairs_pmids, pair_id=pair_id_clean, pmid=pubid, BioGRID = biogrid))
BioGRID_pairs <- unique(select(BioGRID_pairs_pmids, pair_id=pair_id_clean,BioGRID = biogrid))
BioGRID_pmids <- unique(select(BioGRID_pairs_pmids, pmid=pubid,BioGRID = biogrid))
# Chunk 9
setwd("../GO_IPI/results/")
GO_IPI_pairs_pmids <- fread("pairs_pmids_EBI_GOA_nonIntAct.txt",header=T,sep="\t",colClasses=c("character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
GO_IPI_pairs_pmids_sel <- unique(select(GO_IPI_pairs_pmids, pair_id=pair_id_clean, pmid=pubid, GO_IPI = EBI_GOA_nonIntAct))
GO_IPI_pairs <- unique(select(GO_IPI_pairs_pmids, pair_id=pair_id_clean,GO_IPI = EBI_GOA_nonIntAct))
GO_IPI_pmids <- unique(select(GO_IPI_pairs_pmids, pmid=pubid,GO_IPI = EBI_GOA_nonIntAct))
# Chunk 10
setwd("../OmniPath/results/")
OmniPath_interaction_pairs_pmids <- fread("pairs_pmids_OmniPath_interactions_minimal.txt",header=T,sep="\t",colClasses=c("character","character","character","character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
OmniPath_interaction_pairs_pmids_sel <- unique(select(OmniPath_interaction_pairs_pmids, pair_id=pair_id_clean, pmid=pubid, OmniPath_interactions))
OmniPath_interaction_pairs <- unique(select(OmniPath_interaction_pairs_pmids, pair_id=pair_id_clean,OmniPath_interactions))
OmniPath_interaction_pmids <- unique(select(OmniPath_interaction_pairs_pmids, pmid=pubid,OmniPath_interactions))
# Chunk 11
setwd("../OmniPath/results/")
OmniPath_ptm_pairs_pmids <- fread("pairs_pmids_OmniPath_ptm_interactions_minimal.txt",header=T,sep="\t",colClasses=c("character","character","character","character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
OmniPath_ptm_pairs_pmids_sel <- unique(select(OmniPath_ptm_pairs_pmids, pair_id=pair_id_clean, pmid=pubid, OmniPath_ptm))
OmniPath_ptm_pairs <- unique(select(OmniPath_ptm_pairs_pmids, pair_id=pair_id_clean,OmniPath_ptm))
OmniPath_ptm_pmids <- unique(select(OmniPath_ptm_pairs_pmids, pmid=pubid,OmniPath_ptm))
# Chunk 12
all_df <- list(imex_pairs,reactome_pairs,tm_pairs,iid_pred_pairs, EVEX_pairs, BioGRID_pairs, GO_IPI_pairs, OmniPath_interaction_pairs, OmniPath_ptm_pairs)
comp_table <- Reduce(function(...) merge(..., all=TRUE), all_df)
# I clean and replace all NAs if present.
comp_table_final <- comp_table
comp_table_final[is.na(comp_table_final <- comp_table)] <- 0
comp_table_final = unique(comp_table_final)
fwrite(comp_table_final,"./results/comp_table_final.txt",col.names=T,row.names=F,sep="\t",quote=F)
system("gzip ./results/comp_table_final.txt --force")
# Chunk 13: visualize_overlaps
groups = colnames(comp_table_final)[2:ncol(comp_table_final)]
comp_table_final[, overlaps := paste0(imex, reactome, tm_epmc, iid_pred, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm)]
comp_table_final[, N_overlaps := sum(imex, reactome, tm_epmc, iid_pred, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm), by = pair_id]
comp_table_final[, N_per_overlaps := .N, by = overlaps]
comp_table_final[, N_per_N_overlaps := .N, by = N_overlaps]
N_overlaps = unique(comp_table_final[,.(N_overlaps, N_per_N_overlaps)])
N_overlaps = N_overlaps[order(N_per_N_overlaps, decreasing = T),]
qplot(label = N_overlaps$N_per_N_overlaps, y = N_overlaps$N_per_N_overlaps, x = N_overlaps$N_overlaps,  geom = "text") + scale_y_log10(labels = 10^c(1:7), breaks = 10^c(1:7)) +
ggtitle("The number of interacting pairs and the number of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the number of resources")+scale_x_continuous(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)
overlaps = unique(comp_table_final[,.(overlaps, N_per_overlaps)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
# Chunk 14: Shiny
# checkboxGroupInput("groups_sel", NULL, choices=groups,
#                selected=groups[1:4])
sidebarPanel(
selectInput("groups_sel1", "Choose a dataset 1:",
choices = groups, selected = groups[1]),
selectInput("groups_sel2", "Choose a dataset 2:",
choices = groups, selected = groups[2]),
selectInput("groups_sel3", "Choose a dataset 3:",
choices = groups, selected = groups[3]),
selectInput("groups_sel4", "Choose a dataset 4:",
choices = groups, selected = groups[4])
)
# labels look like this "0101"
renderPlot({
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
sel1 = which(colnames(comp_table_final) == input$groups_sel1)
sel2 = which(colnames(comp_table_final) == input$groups_sel2)
sel3 = which(colnames(comp_table_final) == input$groups_sel3)
sel4 = which(colnames(comp_table_final) == input$groups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = comp_table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[, overlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_overlaps := .N, by = overlaps]
if("imex" %in% groups_sel1_4) which(groups_sel1_4 == "imex")
inIMEx = sel_plot[, which(groups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
overlaps = unique(sel_plot[,.(overlaps, N_per_overlaps, inIMEx)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
qplot(label = overlaps$overlaps, y = overlaps$N_per_overlaps, x = overlaps$overlaps, color = overlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle("The number of interacting pairs \n in the combination of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the combination of resources")+scale_x_discrete(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)+
geom_text(aes(y = overlaps$N_per_overlaps+overlaps$N_per_overlaps*0.3, label = overlaps$N_per_overlaps))+
geom_text(aes(y = overlaps$N_per_overlaps-overlaps$N_per_overlaps*0.3, label = overlaps$overlaps))+
geom_text(aes(x=14,y=max(overlaps$N_per_overlaps)-max(overlaps$N_per_overlaps)*0.5,label = paste(input$groups_sel1, "\n", input$groups_sel2, "\n", input$groups_sel3, "\n", input$groups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
}, width = 1000, height = 600)
# labels explain the content
renderPlot({
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
sel1 = which(colnames(comp_table_final) == input$groups_sel1)
sel2 = which(colnames(comp_table_final) == input$groups_sel2)
sel3 = which(colnames(comp_table_final) == input$groups_sel3)
sel4 = which(colnames(comp_table_final) == input$groups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = comp_table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[V1 == 1, V1_n := input$groups_sel1];sel_plot[V1 == 0, V1_n := "none"]
sel_plot[V2 == 1, V2_n := input$groups_sel2];sel_plot[V2 == 0, V2_n := "none"]
sel_plot[V3 == 1, V3_n := input$groups_sel3];sel_plot[V3 == 0, V3_n := "none"]
sel_plot[V4 == 1, V4_n := input$groups_sel4];sel_plot[V4 == 0, V4_n := "none"]
sel_plot[, overlap_names := paste(V1_n, V2_n, V3_n, V4_n, sep = "_g_")]
sel_plot[, overlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_overlaps := .N, by = overlaps]
if("imex" %in% groups_sel1_4) which(groups_sel1_4 == "imex")
inIMEx = sel_plot[, which(groups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
overlaps = unique(sel_plot[,.(overlaps, N_per_overlaps,inIMEx, overlap_names)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
overlaps[, overlap_names := gsub("none_g_","",overlap_names)]
overlaps[, overlap_names := gsub("_g_none_g_","_g_",overlap_names)]
overlaps[, overlap_names := gsub("_g_none","",overlap_names)]
overlaps[, overlap_names := gsub("_g_","\n",overlap_names)]
qplot(label = overlaps$overlaps, y = overlaps$N_per_overlaps, x = overlaps$overlaps, color = overlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle("The number of interacting pairs \n in the combination of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the combination of resources")+scale_x_discrete(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)+
geom_text(aes(y = overlaps$N_per_overlaps+overlaps$N_per_overlaps*0.3, label = overlaps$N_per_overlaps))+
geom_text(aes(y = overlaps$N_per_overlaps-overlaps$N_per_overlaps*0.3, x = overlaps$overlaps, label = overlaps$overlap_names))+
geom_text(aes(x=14,y=max(overlaps$N_per_overlaps)-max(overlaps$N_per_overlaps)*0.5,label = paste(input$groups_sel1, "\n", input$groups_sel2, "\n", input$groups_sel3, "\n", input$groups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
}, width = 1000, height = 600)
#renderTable({
#  head(cars, input$rows)
#})
# Chunk 15
#upset(comp_table_final,
#      nsets = 4,
#      point.size = 6,
#      line.size = 2,
#      mainbar.y.label = "Common protein pairs",
#      sets.x.label = "Nr of protein pairs in dataset",
#      order.by="freq",
#      decreasing=FALSE,
#      queries = list(
#              list(query = intersects, params = list("reactome","iid_pred","tm_epmc"), color = "blue", active = T),
#              list(query = intersects, params = list("iid_pred","tm_epmc"), color= "cornflowerblue",active = T),
#              list(query = intersects, params = list("reactome","iid_pred"), color= "cornflowerblue",active = T),
#              list(query = intersects, params = list("reactome","tm_epmc"), color= "cornflowerblue",active = T),
#              list(query = intersects, params = list("imex","iid_pred","reactome","tm_epmc"), color= "darkorange2",active = T),
#              list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "orange1",active = T),
#              list(query = intersects, params = list("imex","iid_pred","tm_epmc"), color= "orange1",active = T),
#              list(query = intersects, params = list("imex","iid_pred","reactome"), color= "orange1",active = T),
#              list(query = intersects, params = list("imex","iid_pred"), color= "lightgoldenrod1",active = T),
#              list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod1",active = T),
#              list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod1",active = T),
#              list(query = intersects, params = list("imex"), color= "gray70",active = T),
#              list(query = intersects, params = list("reactome"), color= "gray70",active = T),
#              list(query = intersects, params = list("iid_pred"), color= "gray70",active = T),
#              list(query = intersects, params = list("tm_epmc"), color= "gray70",active = T)))
# Chunk 16
upset(comp_table_final,
nsets = 4,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common protein pairs",
sets.x.label = "Nr of protein pairs in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","iid_pred","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("iid_pred","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","iid_pred"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod2",active = T)),
intersections = list(
list("reactome","iid_pred","tm_epmc"),
list("iid_pred","tm_epmc"),
list("reactome","iid_pred"),
list("reactome","tm_epmc"),
list("imex","iid_pred","reactome","tm_epmc"),
list("imex","reactome","tm_epmc"),
list("imex","iid_pred","tm_epmc"),
list("imex","iid_pred","reactome"),
list("imex","iid_pred"),
list("imex","reactome"),
list("imex","tm_epmc")))
# Chunk 17
allpub_df <- list(imex_pmids,reactome_pmids,tm_pmids, EVEX_pmids, BioGRID_pmids, GO_IPI_pmids, OmniPath_interaction_pmids, OmniPath_ptm_pmids)
pubcomp_table <- Reduce(function(...) merge(..., all=TRUE), allpub_df)
# I clean and replace all NAs if present.
pubcomp_table_final <- pubcomp_table
pubcomp_table_final[is.na(pubcomp_table_final <- pubcomp_table)] <- 0
fwrite(pubcomp_table_final,"./results/pubcomp_table_final.txt",col.names=T,row.names=F,sep="\t",quote=F)
system("gzip ./results/pubcomp_table_final.txt --force")
# Chunk 18: visualize_overlaps_publications
pubgroups = colnames(pubcomp_table_final)[2:ncol(pubcomp_table_final)]
pubcomp_table_final[, puboverlaps := paste0(imex, reactome, tm_epmc, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm)]
pubcomp_table_final[, N_puboverlaps := sum(imex, reactome, tm_epmc, EVEX, BioGRID, GO_IPI, OmniPath_interactions, OmniPath_ptm), by = pmid]
pubcomp_table_final[, N_per_puboverlaps := .N, by = puboverlaps]
pubcomp_table_final[, N_per_N_puboverlaps := .N, by = N_puboverlaps]
N_puboverlaps = unique(pubcomp_table_final[,.(N_puboverlaps, N_per_N_puboverlaps)])
N_puboverlaps = N_puboverlaps[order(N_per_N_puboverlaps, decreasing = T),]
qplot(label = N_puboverlaps$N_per_N_puboverlaps, y = N_puboverlaps$N_per_N_puboverlaps, x = N_puboverlaps$N_puboverlaps,  geom = "text") + scale_y_log10(labels = 10^c(1:7), breaks = 10^c(1:7)) +
ggtitle("The number of interacting pairs and the number of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the number of resources")+scale_x_continuous(labels = N_puboverlaps$N_puboverlaps, breaks = N_puboverlaps$N_puboverlaps)
puboverlaps = unique(pubcomp_table_final[,.(puboverlaps, N_per_puboverlaps)])
puboverlaps = puboverlaps[order(N_per_puboverlaps, decreasing = T),]
# Chunk 19: Shiny_publications
# checkboxGroupInput("groups_sel", NULL, choices=pubgroups,
#                selected=pubgroups[1:4])
sidebarPanel(
selectInput("pubgroups_sel1", "Choose a dataset 1:",
choices = pubgroups, selected = pubgroups[1]),
selectInput("pubgroups_sel2", "Choose a dataset 2:",
choices = pubgroups, selected = pubgroups[2]),
selectInput("pubgroups_sel3", "Choose a dataset 3:",
choices = pubgroups, selected = pubgroups[3]),
selectInput("pubgroups_sel4", "Choose a dataset 4:",
choices = pubgroups, selected = pubgroups[4])
)
# labels look like this "0101"
renderPlot({
pubgroups_sel1_4 = c(input$pubgroups_sel1,input$pubgroups_sel2,input$pubgroups_sel3,input$pubgroups_sel4)
sel1 = which(colnames(pubcomp_table_final) == input$pubgroups_sel1)
sel2 = which(colnames(pubcomp_table_final) == input$pubgroups_sel2)
sel3 = which(colnames(pubcomp_table_final) == input$pubgroups_sel3)
sel4 = which(colnames(pubcomp_table_final) == input$pubgroups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = pubcomp_table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[, puboverlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_puboverlaps := .N, by = puboverlaps]
if("imex" %in% pubgroups_sel1_4) which(pubgroups_sel1_4 == "imex")
inIMEx = sel_plot[, which(pubgroups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
puboverlaps = unique(sel_plot[,.(puboverlaps, N_per_puboverlaps, inIMEx)])
puboverlaps = puboverlaps[order(N_per_puboverlaps, decreasing = T),]
qplot(label = puboverlaps$puboverlaps, y = puboverlaps$N_per_puboverlaps, x = puboverlaps$puboverlaps, color = puboverlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle("The number of publications \n in the combination of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the combination of resources")+scale_x_discrete(labels = N_puboverlaps$N_puboverlaps, breaks = N_puboverlaps$N_puboverlaps)+
geom_text(aes(y = puboverlaps$N_per_puboverlaps+puboverlaps$N_per_puboverlaps*0.3, label = puboverlaps$N_per_puboverlaps))+
geom_text(aes(y = puboverlaps$N_per_puboverlaps-puboverlaps$N_per_puboverlaps*0.3, label = puboverlaps$puboverlaps))+
geom_text(aes(x=14,y=max(puboverlaps$N_per_puboverlaps)-max(puboverlaps$N_per_puboverlaps)*0.5,label = paste(input$pubgroups_sel1, "\n", input$pubgroups_sel2, "\n", input$pubgroups_sel3, "\n", input$pubgroups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
}, width = 1000, height = 600)
# labels explain the content
renderPlot({
pubgroups_sel1_4 = c(input$pubgroups_sel1,input$pubgroups_sel2,input$pubgroups_sel3,input$pubgroups_sel4)
sel1 = which(colnames(pubcomp_table_final) == input$pubgroups_sel1)
sel2 = which(colnames(pubcomp_table_final) == input$pubgroups_sel2)
sel3 = which(colnames(pubcomp_table_final) == input$pubgroups_sel3)
sel4 = which(colnames(pubcomp_table_final) == input$pubgroups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = pubcomp_table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[V1 == 1, V1_n := input$pubgroups_sel1];sel_plot[V1 == 0, V1_n := "none"]
sel_plot[V2 == 1, V2_n := input$pubgroups_sel2];sel_plot[V2 == 0, V2_n := "none"]
sel_plot[V3 == 1, V3_n := input$pubgroups_sel3];sel_plot[V3 == 0, V3_n := "none"]
sel_plot[V4 == 1, V4_n := input$pubgroups_sel4];sel_plot[V4 == 0, V4_n := "none"]
sel_plot[, overlap_names := paste(V1_n, V2_n, V3_n, V4_n, sep = "_g_")]
sel_plot[, puboverlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_puboverlaps := .N, by = puboverlaps]
if("imex" %in% pubgroups_sel1_4) which(pubgroups_sel1_4 == "imex")
inIMEx = sel_plot[, which(pubgroups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
puboverlaps = unique(sel_plot[,.(puboverlaps, N_per_puboverlaps,inIMEx, overlap_names)])
puboverlaps = puboverlaps[order(N_per_puboverlaps, decreasing = T),]
puboverlaps[, overlap_names := gsub("none_g_","",overlap_names)]
puboverlaps[, overlap_names := gsub("_g_none_g_","_g_",overlap_names)]
puboverlaps[, overlap_names := gsub("_g_none","",overlap_names)]
puboverlaps[, overlap_names := gsub("_g_","\n",overlap_names)]
qplot(label = puboverlaps$puboverlaps, y = puboverlaps$N_per_puboverlaps, x = puboverlaps$puboverlaps, color = puboverlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle("The number of publications \n in the combination of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the combination of resources")+scale_x_discrete(labels = N_puboverlaps$N_puboverlaps, breaks = N_puboverlaps$N_puboverlaps)+
geom_text(aes(y = puboverlaps$N_per_puboverlaps+puboverlaps$N_per_puboverlaps*0.3, label = puboverlaps$N_per_puboverlaps))+
geom_text(aes(y = puboverlaps$N_per_puboverlaps-puboverlaps$N_per_puboverlaps*0.3, x = puboverlaps$puboverlaps, label = puboverlaps$overlap_names))+
geom_text(aes(x=14,y=max(puboverlaps$N_per_puboverlaps)-max(puboverlaps$N_per_puboverlaps)*0.5,label = paste(input$pubgroups_sel1, "\n", input$pubgroups_sel2, "\n", input$pubgroups_sel3, "\n", input$pubgroups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
}, width = 1000, height = 600)
#renderTable({
#  head(cars, input$rows)
#})
# Chunk 20
upset(pubcomp_table_final,
nsets = 3,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common publications",
sets.x.label = "Nr of publications in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex"), color= "gray70",active = T),
list(query = intersects, params = list("reactome"), color= "gray70",active = T),
list(query = intersects, params = list("tm_epmc"), color= "gray70",active = T)))
# Chunk 21
upset(pubcomp_table_final,
nsets = 3,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common protein pairs",
sets.x.label = "Nr of protein pairs in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod2",active = T)),
intersections = list(
list("reactome","tm_epmc"),
list("imex","reactome","tm_epmc"),
list("imex","reactome"),
list("imex","tm_epmc")))
# Chunk 22
prepubpaircomp_table_1 <- unique(merge(imex_human_sel,reactome_pairs_pmids,by=c("pair_id","pmid"),all=T))
prepubpaircomp_table_2 <- unique(merge(prepubpaircomp_table_1,tm_pairs_pmids_sel,by=c("pair_id","pmid"),all=T))
pubpaircomp_table <- unique(merge(prepubpaircomp_table_2,iid_pred_pairs,by=c("pair_id"),all=T))
# I clean and replace all NAs if present.
pubpaircomp_table_form <- pubpaircomp_table
pubpaircomp_table_form[is.na(pubpaircomp_table_form <- pubpaircomp_table)] <- 0
# Chunk 23
upset(pubpaircomp_table_form,
nsets = 4,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common pair/publication combos",
sets.x.label = "Nr of pair/publication combos in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","iid_pred","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("iid_pred","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","iid_pred"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex"), color= "gray70",active = T),
list(query = intersects, params = list("reactome"), color= "gray70",active = T),
list(query = intersects, params = list("iid_pred"), color= "gray70",active = T),
list(query = intersects, params = list("tm_epmc"), color= "gray70",active = T)))
# Chunk 24
upset(pubpaircomp_table_form,
nsets = 4,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common pair/publication combos",
sets.x.label = "Nr of pair/publication combos in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","iid_pred","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("iid_pred","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","iid_pred"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod2",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod2",active = T)),
intersections = list(
list("reactome","iid_pred","tm_epmc"),
list("iid_pred","tm_epmc"),
list("reactome","iid_pred"),
list("reactome","tm_epmc"),
list("imex","iid_pred","reactome","tm_epmc"),
list("imex","reactome","tm_epmc"),
list("imex","iid_pred","tm_epmc"),
list("imex","iid_pred","reactome"),
list("imex","iid_pred"),
list("imex","reactome"),
list("imex","tm_epmc")))
# Chunk 25: pp_combo_preformat
pubpaircomp_table_check_pt1 <- pubpaircomp_table_form
pubpaircomp_table_check_pt1$prots <- pubpaircomp_table_form$pair_id
pubpaircomp_table_check_pt2 <- cSplit(pubpaircomp_table_check_pt1, "prots", sep = "_", direction = "long")
# Chunk 26: noncur_upload
noimex_spnoisof <- unique(fread("./imex_non_curated/Swissprot_without_isoforms_missing_in_IntAct.txt",header=F,colClasses = "character",data.table = F))
noimex_upnoisof <- unique(fread("./imex_non_curated/UniprotKB_without_isoforms_missing_in_IntAct.txt",header=F,colClasses = "character",data.table = F))
# Chunk 27: missing_check
pubpaircomp_table_check_pt3 <- mutate(pubpaircomp_table_check_pt2,
noncur_prot =
ifelse(
prots %in% noimex_upnoisof$V1,
1,
0))
pubpaircomp_noncur_pairs <- unique(subset(pubpaircomp_table_check_pt3,noncur_prot==1,select= c("pair_id","noncur_prot")))
pubpaircomp_table_check_pt4 <- unique(merge(pubpaircomp_table_form,pubpaircomp_noncur_pairs,by="pair_id",all.x = T,all.y = F))
pubpaircomp_table_final <- pubpaircomp_table_check_pt4
pubpaircomp_table_final[is.na(pubpaircomp_table_final <- pubpaircomp_table_check_pt4)] <- 0
write.table(pubpaircomp_table_final,"./results/pubpaircomp_table_final.txt",col.names=T,row.names=F,sep="\t",quote=F)
setwd("./results")
system("tar -czvf pubpaircomp_table_final.txt.tar.gz pubpaircomp_table_final.txt && rm pubpaircomp_table_final.txt")
setwd("../")
# Chunk 28: final_lhf
lhf <- unique(subset(pubpaircomp_table_final,
imex == 0 &
reactome == 1 &
tm_epmc == 1 &
iid_pred == 1))
lhf <- arrange(lhf,desc(noncur_prot),desc(pmid))
lhf_pairs <- unique(select(lhf,pair_id))
lhf_pmids <- unique(select(lhf,pmid))
write.table(lhf,"./results/lhf_list.txt",col.names=T,row.names = F,sep="\t",quote=F)
# Chunk 29: random_samples
pubpairs_not_imex <- pubpaircomp_table_final[pubpaircomp_table_final$imex==0 & pubpaircomp_table_final$pair_id != "",]
pubpairs_not_imex_sel <- unique(select(pubpairs_not_imex,pmid,pair_id))
publs_not_imex <- unique(select(pubpairs_not_imex,pmid,imex,reactome,tm_epmc,iid_pred,noncur_prot))
set.seed(88)
reactpubl_not_imex <- publs_not_imex[publs_not_imex$reactome==1,]
reactpubl_sample <- reactpubl_not_imex[sample(1:nrow(reactpubl_not_imex),100),]
react_sample <- unique(merge(reactpubl_sample,pubpairs_not_imex_sel,by="pmid"))
tmpubl_not_imex <- publs_not_imex[publs_not_imex$tm_epmc==1,]
tmpubl_sample <- tmpubl_not_imex[sample(1:nrow(tmpubl_not_imex),100),]
tm_sample <- unique(merge(tmpubl_sample,pubpairs_not_imex_sel,by="pmid"))
write.table(reactpubl_sample,"./results/reactpubl_sample.txt",col.names = T,row.names = F,sep="\t",quote=F)
write.table(tmpubl_sample,"./results/tmpubl_sample.txt",col.names = T,row.names = F,sep="\t",quote=F)
pubcomp_table_final
