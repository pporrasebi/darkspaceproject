)
# Plot1: labels look like this "0101"
output$simplePlot <-renderPlot({
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
sel1 = which(colnames(table_final) == input$groups_sel1)
sel2 = which(colnames(table_final) == input$groups_sel2)
sel3 = which(colnames(table_final) == input$groups_sel3)
sel4 = which(colnames(table_final) == input$groups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[, overlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_overlaps := .N, by = overlaps]
if("imex" %in% groups_sel1_4) which(groups_sel1_4 == "imex")
inIMEx = sel_plot[, which(groups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
overlaps = unique(sel_plot[,.(overlaps, N_per_overlaps, inIMEx)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
qplot(label = overlaps$overlaps, y = overlaps$N_per_overlaps, x = overlaps$overlaps, color = overlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle("The number of interacting pairs \n in the combination of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the combination of resources")+scale_x_discrete(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)+
geom_text(aes(y = overlaps$N_per_overlaps+overlaps$N_per_overlaps*0.3, label = overlaps$N_per_overlaps))+
geom_text(aes(y = overlaps$N_per_overlaps-overlaps$N_per_overlaps*0.3, label = overlaps$overlaps))+
geom_text(aes(x=14,y=max(overlaps$N_per_overlaps)-max(overlaps$N_per_overlaps)*0.5,label = paste(input$groups_sel1, "\n", input$groups_sel2, "\n", input$groups_sel3, "\n", input$groups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
}, width = 800, height = 600)
# Plot2: labels explain the content
output$detailedPlot <-renderPlot({
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
sel1 = which(colnames(table_final) == input$groups_sel1)
sel2 = which(colnames(table_final) == input$groups_sel2)
sel3 = which(colnames(table_final) == input$groups_sel3)
sel4 = which(colnames(table_final) == input$groups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[V1 == 1, V1_n := input$groups_sel1];sel_plot[V1 == 0, V1_n := "none"]
sel_plot[V2 == 1, V2_n := input$groups_sel2];sel_plot[V2 == 0, V2_n := "none"]
sel_plot[V3 == 1, V3_n := input$groups_sel3];sel_plot[V3 == 0, V3_n := "none"]
sel_plot[V4 == 1, V4_n := input$groups_sel4];sel_plot[V4 == 0, V4_n := "none"]
sel_plot[, overlap_names := paste(V1_n, V2_n, V3_n, V4_n, sep = "_g_")]
sel_plot[, overlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_overlaps := .N, by = overlaps]
if("imex" %in% groups_sel1_4) which(groups_sel1_4 == "imex")
inIMEx = sel_plot[, which(groups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
overlaps = unique(sel_plot[,.(overlaps, N_per_overlaps,inIMEx, overlap_names)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
overlaps[, overlap_names := gsub("none_g_","",overlap_names)]
overlaps[, overlap_names := gsub("_g_none_g_","_g_",overlap_names)]
overlaps[, overlap_names := gsub("_g_none","",overlap_names)]
overlaps[, overlap_names := gsub("_g_","\n",overlap_names)]
qplot(label = overlaps$overlaps, y = overlaps$N_per_overlaps, x = overlaps$overlaps, color = overlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle("The number of interacting pairs \n in the combination of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the combination of resources")+scale_x_discrete(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)+
geom_text(aes(y = overlaps$N_per_overlaps+overlaps$N_per_overlaps*0.3, label = overlaps$N_per_overlaps))+
geom_text(aes(y = overlaps$N_per_overlaps-overlaps$N_per_overlaps*0.3, x = overlaps$overlaps, label = overlaps$overlap_names))+
geom_text(aes(x=14,y=max(overlaps$N_per_overlaps)-max(overlaps$N_per_overlaps)*0.5,label = paste(input$groups_sel1, "\n", input$groups_sel2, "\n", input$groups_sel3, "\n", input$groups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
}, width = 800, height = 600)
mainPanel(
tabsetPanel(
tabPanel("simplePlot", plotOutput("simplePlot")),
tabPanel("detailedPlot", plotOutput("detailedPlot"))), width = 12
)
}
shiny_for_group_assignment_tables("comp_table_final")
suppressPackageStartupMessages({
library(plyr)
library(dplyr)
library(data.table)
library(UpSetR)
library(splitstackshape)
library(ggplot2)
library(shiny)
library(htmlwidgets)
})
shiny_for_group_assignment_tables = function(table_name){
fluidRow(
{
library(ggplot2)
library(data.table)
library(R.utils)
gzfilename = paste0("./results/",table_name,".txt.gz")
filename = paste0(substr(gzfilename, 1, nchar(gzfilename)-3))
gunzip(gzfilename, overwrite =T, remove =F)
table_final = fread(filename)
unlink(filename)
groups = colnames(table_final)[2:ncol(table_final)]
# generate expression like this "table_final[, overlaps := paste0(imex,reactome,tm_epmc,iid_pred,EVEX,BioGRID,GO_IPI,OmniPath_interactions,OmniPath_ptm)]" and evaluate it - this way the code is independent of column names
eval(parse(text=paste0("table_final[, overlaps := paste0(",paste0(groups, collapse= ","),")]")))
eval(parse(text=paste0("table_final[, N_overlaps := sum(",paste0(groups, collapse= ","),"), by = pair_id]")))
table_final[, N_per_overlaps := .N, by = overlaps]
table_final[, N_per_N_overlaps := .N, by = N_overlaps]
N_overlaps = unique(table_final[,.(N_overlaps, N_per_N_overlaps)])
N_overlaps = N_overlaps[order(N_per_N_overlaps, decreasing = T),]
overlaps = unique(table_final[,.(overlaps, N_per_overlaps)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
},
column(4,
selectInput("groups_sel1", "Choose a dataset 1:",
choices = groups, selected = groups[1])
),
column(4,
selectInput("groups_sel2", "Choose a dataset 2:",
choices = groups, selected = groups[2])
),
column(4,
selectInput("groups_sel3", "Choose a dataset 3:",
choices = groups, selected = groups[3])
),
column(4,
selectInput("groups_sel4", "Choose a dataset 4:",
choices = groups, selected = groups[4]))
)
# Plot1: labels look like this "0101"
output$simplePlot <-renderPlot({
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
sel1 = which(colnames(table_final) == input$groups_sel1)
sel2 = which(colnames(table_final) == input$groups_sel2)
sel3 = which(colnames(table_final) == input$groups_sel3)
sel4 = which(colnames(table_final) == input$groups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[, overlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_overlaps := .N, by = overlaps]
if("imex" %in% groups_sel1_4) which(groups_sel1_4 == "imex")
inIMEx = sel_plot[, which(groups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
overlaps = unique(sel_plot[,.(overlaps, N_per_overlaps, inIMEx)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
qplot(label = overlaps$overlaps, y = overlaps$N_per_overlaps, x = overlaps$overlaps, color = overlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle("The number of interacting pairs \n in the combination of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the combination of resources")+scale_x_discrete(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)+
geom_text(aes(y = overlaps$N_per_overlaps+overlaps$N_per_overlaps*0.3, label = overlaps$N_per_overlaps))+
geom_text(aes(y = overlaps$N_per_overlaps-overlaps$N_per_overlaps*0.3, label = overlaps$overlaps))+
geom_text(aes(x=14,y=max(overlaps$N_per_overlaps)-max(overlaps$N_per_overlaps)*0.5,label = paste(input$groups_sel1, "\n", input$groups_sel2, "\n", input$groups_sel3, "\n", input$groups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
}, width = 800, height = 600)
# Plot2: labels explain the content
output$detailedPlot <-renderPlot({
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
sel1 = which(colnames(table_final) == input$groups_sel1)
sel2 = which(colnames(table_final) == input$groups_sel2)
sel3 = which(colnames(table_final) == input$groups_sel3)
sel4 = which(colnames(table_final) == input$groups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[V1 == 1, V1_n := input$groups_sel1];sel_plot[V1 == 0, V1_n := "none"]
sel_plot[V2 == 1, V2_n := input$groups_sel2];sel_plot[V2 == 0, V2_n := "none"]
sel_plot[V3 == 1, V3_n := input$groups_sel3];sel_plot[V3 == 0, V3_n := "none"]
sel_plot[V4 == 1, V4_n := input$groups_sel4];sel_plot[V4 == 0, V4_n := "none"]
sel_plot[, overlap_names := paste(V1_n, V2_n, V3_n, V4_n, sep = "_g_")]
sel_plot[, overlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_overlaps := .N, by = overlaps]
if("imex" %in% groups_sel1_4) which(groups_sel1_4 == "imex")
inIMEx = sel_plot[, which(groups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
overlaps = unique(sel_plot[,.(overlaps, N_per_overlaps,inIMEx, overlap_names)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
overlaps[, overlap_names := gsub("none_g_","",overlap_names)]
overlaps[, overlap_names := gsub("_g_none_g_","_g_",overlap_names)]
overlaps[, overlap_names := gsub("_g_none","",overlap_names)]
overlaps[, overlap_names := gsub("_g_","\n",overlap_names)]
qplot(label = overlaps$overlaps, y = overlaps$N_per_overlaps, x = overlaps$overlaps, color = overlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle("The number of interacting pairs \n in the combination of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the combination of resources")+scale_x_discrete(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)+
geom_text(aes(y = overlaps$N_per_overlaps+overlaps$N_per_overlaps*0.3, label = overlaps$N_per_overlaps))+
geom_text(aes(y = overlaps$N_per_overlaps-overlaps$N_per_overlaps*0.3, x = overlaps$overlaps, label = overlaps$overlap_names))+
geom_text(aes(x=14,y=max(overlaps$N_per_overlaps)-max(overlaps$N_per_overlaps)*0.5,label = paste(input$groups_sel1, "\n", input$groups_sel2, "\n", input$groups_sel3, "\n", input$groups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
}, width = 800, height = 600)
mainPanel(
tabsetPanel(
tabPanel("simplePlot", plotOutput("simplePlot")),
tabPanel("detailedPlot", plotOutput("detailedPlot"))), width = 12
)
}
shiny_for_group_assignment_tables("comp_table_final")
?mainPanel
??mainPanel
upset(comp_table_final,
nsets = 4,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common protein pairs",
sets.x.label = "Nr of protein pairs in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","iid_pred","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("iid_pred","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","iid_pred"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex"), color= "gray70",active = T),
list(query = intersects, params = list("reactome"), color= "gray70",active = T),
list(query = intersects, params = list("iid_pred"), color= "gray70",active = T),
list(query = intersects, params = list("tm_epmc"), color= "gray70",active = T)))
suppressPackageStartupMessages({
library(plyr)
library(dplyr)
library(data.table)
library(UpSetR)
library(splitstackshape)
library(ggplot2)
library(shiny)
library(htmlwidgets)
})
upset(comp_table_final,
nsets = 4,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common protein pairs",
sets.x.label = "Nr of protein pairs in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","iid_pred","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("iid_pred","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","iid_pred"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex"), color= "gray70",active = T),
list(query = intersects, params = list("reactome"), color= "gray70",active = T),
list(query = intersects, params = list("iid_pred"), color= "gray70",active = T),
list(query = intersects, params = list("tm_epmc"), color= "gray70",active = T)))
imex_full <- fread("../IMEx/results/imex_full.txt", header=T, sep="\t",colClasses="character",data.table = T)
imex_human <- unique(subset(imex_full,taxid_a=="9606" & taxid_b=="9606"))
imex_human$imex <- 1
imex_human_sel <- unique(select(imex_human,pair_id=pair_id_clean,pmid=pubid,imex))
imex_pairs <- unique(select(imex_human,pair_id=pair_id_clean,imex))
imex_pmids <- unique(select(imex_human,pmid=pubid,imex))
setwd("../reactome_interactions/results/")
system("gunzip -k pairs_pmid_reactome.txt.gz")
reactome_pairs_pmids <- fread("pairs_pmid_reactome.txt",header=T,sep="\t",colClasses=c("character","character","numeric"),data.table = T)
system("rm pairs_pmid_reactome.txt")
setwd("../../dsp_comparison/")
reactome_pairs <- unique(select(reactome_pairs_pmids,pair_id,reactome))
reactome_pmids <- unique(select(reactome_pairs_pmids,pmid,reactome))
setwd("../epmc_text_mining/results/")
system("gunzip -k pairs_pmids_tm.txt.gz")
tm_pairs_pmids <- fread("pairs_pmids_tm.txt",header=T,sep="\t",colClasses=c("character","character","numeric"),data.table = T)
system("rm pairs_pmids_tm.txt")
setwd("../../dsp_comparison/")
tm_pairs_pmids_sel <- unique(select(tm_pairs_pmids,pair_id,pmid,tm_epmc=tm))
tm_pairs <- unique(select(tm_pairs_pmids,pair_id,tm_epmc=tm))
tm_pmids <- unique(select(tm_pairs_pmids,pmid,tm_epmc=tm))
iid_pred_pairs <- fread("../iid_predictions/results/pairs_iid_pred.txt",header=T,sep="\t",colClasses=c("character","numeric"),data.table=T)
setwd("../EVEX/results/")
EVEX_pairs_pmids <- fread("pairs_pmids_EVEX_shallow.txt",header=T,sep="\t",colClasses=c("character","character","character","character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
EVEX_pairs_pmids_sel <- unique(select(EVEX_pairs_pmids, pair_id=pair_id_clean, pmid=pubid,EVEX))
EVEX_pairs <- unique(select(EVEX_pairs_pmids, pair_id=pair_id_clean,EVEX))
EVEX_pmids <- unique(select(EVEX_pairs_pmids, pmid=pubid,EVEX))
setwd("../BioGRID/results/")
BioGRID_pairs_pmids <- fread("pairs_pmids_biogrid.txt",header=T,sep="\t",colClasses=c("character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
BioGRID_pairs_pmids_sel <- unique(select(BioGRID_pairs_pmids, pair_id=pair_id_clean, pmid=pubid, BioGRID = biogrid))
BioGRID_pairs <- unique(select(BioGRID_pairs_pmids, pair_id=pair_id_clean,BioGRID = biogrid))
BioGRID_pmids <- unique(select(BioGRID_pairs_pmids, pmid=pubid,BioGRID = biogrid))
setwd("../GO_IPI/results/")
GO_IPI_pairs_pmids <- fread("pairs_pmids_EBI_GOA_nonIntAct.txt",header=T,sep="\t",colClasses=c("character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
GO_IPI_pairs_pmids_sel <- unique(select(GO_IPI_pairs_pmids, pair_id=pair_id_clean, pmid=pubid, GO_IPI = EBI_GOA_nonIntAct))
GO_IPI_pairs <- unique(select(GO_IPI_pairs_pmids, pair_id=pair_id_clean,GO_IPI = EBI_GOA_nonIntAct))
GO_IPI_pmids <- unique(select(GO_IPI_pairs_pmids, pmid=pubid,GO_IPI = EBI_GOA_nonIntAct))
setwd("../OmniPath/results/")
OmniPath_interaction_pairs_pmids <- fread("pairs_pmids_OmniPath_interactions_minimal.txt",header=T,sep="\t",colClasses=c("character","character","character","character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
OmniPath_interaction_pairs_pmids_sel <- unique(select(OmniPath_interaction_pairs_pmids, pair_id=pair_id_clean, pmid=pubid, OmniPath_interactions))
OmniPath_interaction_pairs <- unique(select(OmniPath_interaction_pairs_pmids, pair_id=pair_id_clean,OmniPath_interactions))
OmniPath_interaction_pmids <- unique(select(OmniPath_interaction_pairs_pmids, pmid=pubid,OmniPath_interactions))
setwd("../OmniPath/results/")
OmniPath_ptm_pairs_pmids <- fread("pairs_pmids_OmniPath_ptm_interactions_minimal.txt",header=T,sep="\t",colClasses=c("character","character","character","character","character","numeric"),data.table = T)
setwd("../../dsp_comparison/")
OmniPath_ptm_pairs_pmids_sel <- unique(select(OmniPath_ptm_pairs_pmids, pair_id=pair_id_clean, pmid=pubid, OmniPath_ptm))
OmniPath_ptm_pairs <- unique(select(OmniPath_ptm_pairs_pmids, pair_id=pair_id_clean,OmniPath_ptm))
OmniPath_ptm_pmids <- unique(select(OmniPath_ptm_pairs_pmids, pmid=pubid,OmniPath_ptm))
all_df <- list(imex_pairs,reactome_pairs,tm_pairs,iid_pred_pairs, EVEX_pairs, BioGRID_pairs, GO_IPI_pairs, OmniPath_interaction_pairs, OmniPath_ptm_pairs)
comp_table <- Reduce(function(...) merge(..., all=TRUE), all_df)
# I clean and replace all NAs if present.
comp_table_final <- comp_table
comp_table_final[is.na(comp_table_final <- comp_table)] <- 0
comp_table_final = unique(comp_table_final)
fwrite(comp_table_final,"./results/comp_table_final.txt",col.names=T,row.names=F,sep="\t",quote=F)
system("gzip ./results/comp_table_final.txt --force")
unlink("./results/comp_table_final.txt")
upset(comp_table_final,
nsets = 4,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common protein pairs",
sets.x.label = "Nr of protein pairs in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","iid_pred","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("iid_pred","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","iid_pred"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex"), color= "gray70",active = T),
list(query = intersects, params = list("reactome"), color= "gray70",active = T),
list(query = intersects, params = list("iid_pred"), color= "gray70",active = T),
list(query = intersects, params = list("tm_epmc"), color= "gray70",active = T)))
ls()
grep("_pairs", ls())
grep("_pairs", ls(), value = )
grep("_pairs", ls(), value = T)
grep("_pairs$", ls(), value = T)
paste0("all_df <- list(",paste0(grep("_pairs$", ls(), value = T), collapse= ","),")")
paste0("all_df <- list(",paste0(grep("_pairs$", ls(), value = T), collapse= ","),")")
# Code below generates (to allow any number and any column names) and evaluates this:
paste0("all_df <- list(",paste0(grep("_pairs$", ls(), value = T), collapse= ","),")")
eval(parse(text=paste0("all_df <- list(",paste0(grep("_pairs$", ls(), value = T), collapse= ","),")")))
comp_table <- Reduce(function(...) merge(..., all=TRUE), all_df)
# I clean and replace all NAs if present.
comp_table_final <- comp_table
comp_table_final[is.na(comp_table_final <- comp_table)] <- 0
comp_table_final = unique(comp_table_final)
fwrite(comp_table_final,"./results/comp_table_final.txt",col.names=T,row.names=F,sep="\t",quote=F)
system("gzip ./results/comp_table_final.txt --force")
unlink("./results/comp_table_final.txt")
groups = colnames(comp_table_final)[2:ncol(comp_table_final)]
# generate expression like this "comp_table_final[, overlaps := paste0(imex,reactome,tm_epmc,iid_pred,EVEX,BioGRID,GO_IPI,OmniPath_interactions,OmniPath_ptm)]" and evaluate it - this way the code is independent of column names
eval(parse(text=paste0("comp_table_final[, overlaps := paste0(",paste0(groups, collapse= ","),")]")))
eval(parse(text=paste0("comp_table_final[, N_overlaps := sum(",paste0(groups, collapse= ","),"), by = pair_id]")))
comp_table_final[, N_per_overlaps := .N, by = overlaps]
comp_table_final[, N_per_N_overlaps := .N, by = N_overlaps]
N_overlaps = unique(comp_table_final[,.(N_overlaps, N_per_N_overlaps)])
N_overlaps = N_overlaps[order(N_per_N_overlaps, decreasing = T),]
qplot(label = N_overlaps$N_per_N_overlaps, y = N_overlaps$N_per_N_overlaps, x = N_overlaps$N_overlaps,  geom = "text") + scale_y_log10(labels = 10^c(1:7), breaks = 10^c(1:7)) +
ggtitle("The number of interacting pairs and the number of resources the pairs are shared between") + ylab("the number of interacting pairs, log10 scale")+ xlab("the number of resources")+scale_x_continuous(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)
overlaps = unique(comp_table_final[,.(overlaps, N_per_overlaps)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
upset(comp_table_final,
nsets = 4,
point.size = 6,
line.size = 2,
mainbar.y.label = "Common protein pairs",
sets.x.label = "Nr of protein pairs in dataset",
order.by="freq",
decreasing=FALSE,
queries = list(
list(query = intersects, params = list("reactome","iid_pred","tm_epmc"), color = "blue", active = T),
list(query = intersects, params = list("iid_pred","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","iid_pred"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("reactome","tm_epmc"), color= "cornflowerblue",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome","tm_epmc"), color= "darkorange2",active = T),
list(query = intersects, params = list("imex","reactome","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","tm_epmc"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred","reactome"), color= "orange1",active = T),
list(query = intersects, params = list("imex","iid_pred"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex","reactome"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex","tm_epmc"), color= "lightgoldenrod1",active = T),
list(query = intersects, params = list("imex"), color= "gray70",active = T),
list(query = intersects, params = list("reactome"), color= "gray70",active = T),
list(query = intersects, params = list("iid_pred"), color= "gray70",active = T),
list(query = intersects, params = list("tm_epmc"), color= "gray70",active = T)))
pubpaircomp_table_check_pt2
prepubpaircomp_table_1 <- unique(merge(imex_human_sel,reactome_pairs_pmids,by=c("pair_id","pmid"),all=T))
prepubpaircomp_table_2 <- unique(merge(prepubpaircomp_table_1,tm_pairs_pmids_sel,by=c("pair_id","pmid"),all=T))
pubpaircomp_table <- unique(merge(prepubpaircomp_table_2,iid_pred_pairs,by=c("pair_id"),all=T))
# I clean and replace all NAs if present.
pubpaircomp_table_form <- pubpaircomp_table
pubpaircomp_table_form[is.na(pubpaircomp_table_form <- pubpaircomp_table)] <- 0
pubpaircomp_table_check_pt1 <- pubpaircomp_table_form
pubpaircomp_table_check_pt1$prots <- pubpaircomp_table_form$pair_id
pubpaircomp_table_check_pt2 <- cSplit(pubpaircomp_table_check_pt1, "prots", sep = "_", direction = "long")
?tabsetPanel
library(ggplot2)
library(data.table)
library(R.utils)
gzfilename = paste0("./results/",table_name,".txt.gz")
table_name = "comp_table_final"
gzfilename = paste0("./results/",table_name,".txt.gz")
filename = paste0(substr(gzfilename, 1, nchar(gzfilename)-3))
gunzip(gzfilename, overwrite =T, remove =F)
table_final = fread(filename)
unlink(filename)
groups = colnames(table_final)[2:ncol(table_final)]
eval(parse(text=paste0("table_final[, overlaps := paste0(",paste0(groups, collapse= ","),")]")))
eval(parse(text=paste0("table_final[, N_overlaps := sum(",paste0(groups, collapse= ","),"), by = pair_id]")))
table_final[, N_per_overlaps := .N, by = overlaps]
table_final[, N_per_N_overlaps := .N, by = N_overlaps]
N_overlaps = unique(table_final[,.(N_overlaps, N_per_N_overlaps)])
N_overlaps = N_overlaps[order(N_per_N_overlaps, decreasing = T),]
overlaps = unique(table_final[,.(overlaps, N_per_overlaps)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
groups_sel1 = selected = groups[1]
groups_sel2 = groups[2]
groups_sel3 = groups[3]
groups_sel4 = groups[4]
groups_sel1
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
input = list(groups_sel1, groups_sel2, groups_sel3, groups_sel4)
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
sel1 = which(colnames(table_final) == input$groups_sel1)
sel2 = which(colnames(table_final) == input$groups_sel2)
sel3 = which(colnames(table_final) == input$groups_sel3)
sel4 = which(colnames(table_final) == input$groups_sel4)
sel = c(sel1,sel2,sel3,sel4)
sel_plot = table_final[,sel,with = FALSE]
sel_plot
table_final = fread(filename)
gzfilename = paste0("./results/",table_name,".txt.gz")
filename = paste0(substr(gzfilename, 1, nchar(gzfilename)-3))
gunzip(gzfilename, overwrite =T, remove =F)
table_final = fread(filename)
unlink(filename)
table_final
groups = colnames(table_final)[2:ncol(table_final)]
groups
eval(parse(text=paste0("table_final[, overlaps := paste0(",paste0(groups, collapse= ","),")]")))
eval(parse(text=paste0("table_final[, N_overlaps := sum(",paste0(groups, collapse= ","),"), by = pair_id]")))
table_final[, N_per_overlaps := .N, by = overlaps]
table_final[, N_per_N_overlaps := .N, by = N_overlaps]
table_final
N_overlaps = unique(table_final[,.(N_overlaps, N_per_N_overlaps)])
N_overlaps = N_overlaps[order(N_per_N_overlaps, decreasing = T),]
overlaps = unique(table_final[,.(overlaps, N_per_overlaps)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
groups_sel1_4
input
input = data.frame(groups_sel1, groups_sel2, groups_sel3, groups_sel4)
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
groups_sel1_4
input$groups_sel1
input$groups_sel2
input
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
groups_sel1_4
groups_sel1_4 = as.character(input)
groups_sel1_4
input = sapply(input, function(x) as.character(x))
input
groups_sel1_4 = c(input$groups_sel1,input$groups_sel2,input$groups_sel3,input$groups_sel4)
pubcomp_table_final
pubpaircomp_table_check_pt2
pubpaircomp_table_check_pt1[,.(pair_id, pmid, imex, reactome, tm_epmc, iid_pred, prots = strsplit(prots)), by = paste(pair_id, pmid)]
pubpaircomp_table_check_pt1[,.(pair_id, pmid, imex, reactome, tm_epmc, iid_pred, prots = strsplit(prots, "_")), by = paste(pair_id, pmid)]
system.time({pubpaircomp_table_check_pt1[,.(pair_id, pmid, imex, reactome, tm_epmc, iid_pred, prots = strsplit(prots, "_")), by = paste(pair_id, pmid)]})
system.time({pubpaircomp_table_check_pt2 <- cSplit(pubpaircomp_table_check_pt1, "prots", sep = "_", direction = "long")})
table_name1 = "comp_table_final"
type_of_data = "interacting pairs" # or "publications" or "interacting pairs and publications"
library(ggplot2)
library(data.table)
library(R.utils)
gzfilename = paste0("./results/",table_name1,".txt.gz")
filename = paste0(substr(gzfilename, 1, nchar(gzfilename)-3))
gunzip(gzfilename, overwrite =T, remove =F)
table_final = fread(filename)
unlink(filename)
groups = colnames(table_final)[2:ncol(table_final)]
eval(parse(text=paste0("table_final[, overlaps := paste0(",paste0(groups, collapse= ","),")]")))
eval(parse(text=paste0("table_final[, N_overlaps := sum(",paste0(groups, collapse= ","),"), by = pair_id]")))
groups
table_final[, N_per_overlaps := .N, by = overlaps]
table_final[, N_per_N_overlaps := .N, by = N_overlaps]
N_overlaps = unique(table_final[,.(N_overlaps, N_per_N_overlaps)])
N_overlaps = N_overlaps[order(N_per_N_overlaps, decreasing = T),]
overlaps = unique(table_final[,.(overlaps, N_per_overlaps)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
input
groups_sel1_4 = c("BioGRID", "EVEX", "GO_IPI", "iid_pred")
sel1 = which(colnames(table_final) == groups_sel1_4[1])
sel2 = which(colnames(table_final) == groups_sel1_4[2])
sel3 = which(colnames(table_final) == groups_sel1_4[3])
sel4 = which(colnames(table_final) == groups_sel1_4[4])
sel = c(sel1,sel2,sel3,sel4)
sel_plot = table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[, overlaps := paste0(V1, V2, V3, V4)]
sel_plot[, N_per_overlaps := .N, by = overlaps]
if("imex" %in% groups_sel1_4) {which(groups_sel1_4 == "imex")
inIMEx = sel_plot[, which(groups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := inIMEx]
}
if(!"imex" %in% groups_sel1_4) {which(groups_sel1_4 == "imex")
inIMEx = sel_plot[, which(groups_sel1_4 == "imex"),with = FALSE]
sel_plot[, inIMEx := 0]
}
overlaps = unique(sel_plot[,.(overlaps, N_per_overlaps, inIMEx)])
overlaps = overlaps[order(N_per_overlaps, decreasing = T),]
qplot(label = overlaps$overlaps, y = overlaps$N_per_overlaps, x = overlaps$overlaps, color = overlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle(paste0("The number of ", type_of_data ," found \n in the combination of resources the pairs are shared between")) + ylab(paste0("the number of ", type_of_data ,", log10 scale"))+ xlab("the combination of resources")+scale_x_discrete(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)+
geom_text(aes(y = overlaps$N_per_overlaps+overlaps$N_per_overlaps*0.3, label = overlaps$N_per_overlaps))+
geom_text(aes(y = overlaps$N_per_overlaps-overlaps$N_per_overlaps*0.3, label = overlaps$overlaps))+
geom_text(aes(x=14,y=max(overlaps$N_per_overlaps)-max(overlaps$N_per_overlaps)*0.5,label = paste(input$groups_sel1, "\n", input$groups_sel2, "\n", input$groups_sel3, "\n", input$groups_sel4, "\n")),colour = "black")+ theme(legend.position="none")
as.list(groups_sel1_4)
qplot(label = overlaps$overlaps, y = overlaps$N_per_overlaps, x = overlaps$overlaps, color = overlaps$inIMEx,  geom = "point") + scale_y_log10() +
ggtitle(paste0("The number of ", type_of_data ," found \n in the combination of resources the pairs are shared between")) + ylab(paste0("the number of ", type_of_data ,", log10 scale"))+ xlab("the combination of resources")+scale_x_discrete(labels = N_overlaps$N_overlaps, breaks = N_overlaps$N_overlaps)+
geom_text(aes(y = overlaps$N_per_overlaps+overlaps$N_per_overlaps*0.3, label = overlaps$N_per_overlaps))+
geom_text(aes(y = overlaps$N_per_overlaps-overlaps$N_per_overlaps*0.3, label = overlaps$overlaps))
sel_plot = table_final[,sel,with = FALSE]
setnames(sel_plot, colnames(sel_plot), c("V1", "V2", "V3", "V4"))
sel_plot[V1 == 1, V1_n := input$groups_sel1];sel_plot[V1 == 0, V1_n := "none"]
rm(list = ls())
